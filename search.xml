<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MarkDown语法</title>
    <url>/2022/07/06/MarkDown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>&#x3D;&#x3D;(2) 字体&#x3D;&#x3D;</p>
<p><strong>加粗</strong>  正常<br><em>倾斜</em><br><em><strong>倾斜加粗</strong></em><br><del>删除线</del><br>&#x3D;&#x3D;高亮&#x3D;&#x3D;<br>我是^上标^<br>我是<del>下标</del></p>
<p>&#x3D;&#x3D;(3) 列表&#x3D;&#x3D;</p>
<ul>
<li>12345<ul>
<li>6789 10<ul>
<li>12345 <ul>
<li>678910</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol>
<li>2234</li>
<li>45345</li>
<li>345345</li>
<li>453534</li>
</ol>
<p>&#x3D;&#x3D;(4) 表格&#x3D;&#x3D;<br>我觉得这个用正常模式好<br>CTRL + T</p>
<table>
<thead>
<tr>
<th align="center">MON</th>
<th align="center">TUE</th>
<th align="center">WED</th>
<th align="center">THU</th>
<th align="center">FRI</th>
<th align="center">SAT</th>
<th align="center">SUN</th>
</tr>
</thead>
<tbody><tr>
<td align="center">上山</td>
<td align="center">上山</td>
<td align="center">上山</td>
<td align="center">上山</td>
<td align="center">上山</td>
<td align="center">上山</td>
<td align="center">上山</td>
</tr>
<tr>
<td align="center">打老虎</td>
<td align="center">打老虎</td>
<td align="center">打老虎</td>
<td align="center">打老虎</td>
<td align="center">打老虎</td>
<td align="center">打老虎</td>
<td align="center">打老虎</td>
</tr>
</tbody></table>
<p> &#x3D;&#x3D;(5) 引用&#x3D;&#x3D;</p>
<blockquote>
<p>一二三四五</p>
<blockquote>
<p>上山打老虎</p>
<blockquote>
<p>老虎不在家</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>打到小松鼠</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<p>&#x3D;&#x3D;(6) 分割线&#x3D;&#x3D;</p>
<hr>
<p>&#x3D;&#x3D;(7) 代码&#x3D;&#x3D;</p>
<p><code>c语言</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>,c;</span><br><span class="line">	c = a + b;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,c);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MarkDown语法</category>
      </categories>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 引入方式</title>
    <url>/2022/10/14/css-%E5%BC%95%E5%85%A5%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="一-css-的定义"><a href="#一-css-的定义" class="headerlink" title="一. css 的定义"></a>一. css 的定义</h1><p> css(Cascading Style Sheet)层叠样式表，它是用来美化页面的一种语言。</p>
<h1 id="二-css-的作用"><a href="#二-css-的作用" class="headerlink" title="二. css 的作用"></a>二. css 的作用</h1><p>css(Cascading Style Sheet)层叠样式表，它是用来美化页面的一种语言。<br>美化界面, 比如: 设置标签文字大小、颜色、字体加粗等样式。<br>控制页面布局, 比如: 设置浮动、定位等样式。</p>
<span id="more"></span>

<h1 id="三-css-的基本语法"><a href="#三-css-的基本语法" class="headerlink" title="三. css 的基本语法"></a>三. css 的基本语法</h1><p>选择器{</p>
<p>样式规则</p>
<p>}</p>
<p>样式规则：</p>
<p>属性名1：属性值1;</p>
<p>属性名2：属性值2;</p>
<p>属性名3：属性值3;</p>
<p>…</p>
<p>选择器:是用来选择标签的，选出来以后给标签加样式。</p>
<p>代码示例:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div&#123; </span><br><span class="line">    width:100px; </span><br><span class="line">    height:100px; </span><br><span class="line">    background:gold; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明</p>
<p>css 是由两个主要的部分构成：选择器和一条或多条样式规则，注意:样式规则需要放到大括号里面。</p>
<h1 id="四-css的三种引入方式"><a href="#四-css的三种引入方式" class="headerlink" title="四. css的三种引入方式"></a>四. css的三种引入方式</h1><blockquote>
<ol>
<li>行内式</li>
<li>内嵌式（内部样式）</li>
<li>外链式</li>
</ol>
</blockquote>
<h3 id="4-1-行内式"><a href="#4-1-行内式" class="headerlink" title="4.1 行内式"></a>4.1 行内式</h3><blockquote>
<p>直接在标签的 style 属性中添加 css 样式</p>
</blockquote>
<p>演示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width:100px; height:100px; background:red &quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>优点：方便、直观。 缺点：缺乏可重用性。</p>
<h3 id="4-2-内嵌式（内部样式）"><a href="#4-2-内嵌式（内部样式）" class="headerlink" title="4.2 内嵌式（内部样式）"></a>4.2 内嵌式（内部样式）</h3><blockquote>
<p>在<code>&lt;head&gt;</code>标签内加入<code>&lt;style&gt;</code>标签，在<code>&lt;style&gt;</code>标签中编写css代码。</p>
</blockquote>
<p>演示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">h3</span>&#123;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>优点：在同一个页面内部便于复用和维护。 缺点：在多个页面之间的可重用性不够高。</p>
<h3 id="4-3-外链式"><a href="#4-3-外链式" class="headerlink" title="4.3 外链式"></a>4.3 外链式</h3><blockquote>
<p>将css代码写在一个单独的.css文件中，在<code>&lt;head&gt;</code>标签中使用<code>&lt;link&gt;</code>标签直接引入该文件到页面中。</p>
</blockquote>
<p>演示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/main.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>优点：使得css样式与html页面分离，便于整个页面系统的规划和维护，可重用性高。 缺点：css代码由于分离到单独的css文件，容易出现css代码过于集中，若维护不当则极容易造成混乱。</p>
<h1 id="五-css引入方式选择"><a href="#五-css引入方式选择" class="headerlink" title="五. css引入方式选择"></a>五. css引入方式选择</h1><ol>
<li>行内式几乎不用</li>
<li>内嵌式在学习css样式的阶段使用</li>
<li>外链式在公司开发的阶段使用，可以对 css 样式和 html 页面分别进行开发。</li>
</ol>
<h1 id="六-css引入方式选择"><a href="#六-css引入方式选择" class="headerlink" title="六. css引入方式选择"></a>六. css引入方式选择</h1><ol>
<li>行内式几乎不用</li>
<li>内嵌式在学习css样式的阶段使用</li>
<li>外链式在公司开发的阶段使用，可以对 css 样式和 html 页面分别进行开发。</li>
</ol>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 选择器</title>
    <url>/2022/10/24/css-%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<h1 id="一-css-选择器的定义"><a href="#一-css-选择器的定义" class="headerlink" title="一. css 选择器的定义"></a>一. css 选择器的定义</h1><p>css 选择器是用来选择标签的，选出来以后给标签加样式。</p>
<h1 id="二-css-选择器的种类"><a href="#二-css-选择器的种类" class="headerlink" title="二. css 选择器的种类"></a>二. css 选择器的种类</h1><ol>
<li>标签选择器</li>
<li>类选择器</li>
<li>层级选择器(后代选择器)</li>
<li>id选择器</li>
<li>组选择器</li>
<li>伪类选择器</li>
</ol>
<span id="more"></span>
<h1 id="三-标签选择器"><a href="#三-标签选择器" class="headerlink" title="三. 标签选择器"></a>三. 标签选择器</h1><p>根据标签来选择标签，<strong>以标签开头</strong>，此种选择器影响范围大，一般用来做一些通用设置。</p>
<p><strong>示例代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">170</span>, <span class="number">55</span>, <span class="number">55</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 标签选择器，就是以标签名开头，根据标签名来选择html文件中的标签没给标签添加样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/2022/10/24/css-%E9%80%89%E6%8B%A9%E5%99%A8/01.png" class title="This is an test image">



<h1 id="四-类选择器"><a href="#四-类选择器" class="headerlink" title="四. 类选择器"></a>四. 类选择器</h1><p>根据类名来选择标签，<strong>以 . 开头</strong>, 一个类选择器可应用于多个标签上，一个标签上也可以使用多个类选择器，多个类选择器需要使用空格分割，应用灵活，可复用，是css中应用最多的一种选择器。</p>
<p><strong>示例代码</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="comment">/* 类选择器 */</span></span><br><span class="line">        <span class="comment">/* 类选择器优先级高于标签选择器 */</span></span><br><span class="line">        <span class="comment">/* p &#123;</span></span><br><span class="line"><span class="comment">            color: red;</span></span><br><span class="line"><span class="comment">        &#125; */</span></span><br><span class="line">        <span class="selector-class">.mp</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: yellow;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.mmp</span> &#123;</span><br><span class="line">            <span class="attribute">background-color</span>: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;hello&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> class=&quot;mp&quot;&gt;soga&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;!-- 这里的标签选择了两个类选择器 --&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> class=&quot;mp mmp&quot;&gt;soga sodisinei&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure>

<img src="/2022/10/24/css-%E9%80%89%E6%8B%A9%E5%99%A8/02.png" class title="This is an test image">



<h1 id="五-层级选择器-后代选择器"><a href="#五-层级选择器-后代选择器" class="headerlink" title="五. 层级选择器(后代选择器)"></a>五. 层级选择器(后代选择器)</h1><p>根据层级关系选择后代标签，<strong>以选择器1 选择器2开头</strong>，主要应用在标签嵌套的结构中，减少命名。</p>
<p><strong>示例代码</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="comment">/* 层级选择器要有层级关系，根据层级关系获得子标签，给子标签添加样式 */</span></span><br><span class="line">        <span class="selector-tag">div</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: green;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">div</span> <span class="selector-class">.box2</span>&#123; </span><br><span class="line">            <span class="attribute">color</span>: blue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* div div p&#123;</span></span><br><span class="line"><span class="comment">            color: red;</span></span><br><span class="line"><span class="comment">        &#125; */</span></span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">div</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: aqua;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span>&gt;哈哈&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;box2&quot;&gt;嘻嘻&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">p</span>&gt;hello&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">        &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;哈哈&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;!-- 层级选择器不一定是父子关系，祖孙标签也可以找到，完成添加样式的操作 --&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注意点: 这个层级关系不一定是父子关系，也有可能是祖孙关系，只要有后代关系都适用于这个层级选择器</strong></p>
<img src="/2022/10/24/css-%E9%80%89%E6%8B%A9%E5%99%A8/03.png" class title="This is an test image">



<h1 id="六-id选择器"><a href="#六-id选择器" class="headerlink" title="六. id选择器"></a>六. id选择器</h1><p>根据id选择标签，以#开头, 元素的id名称不能重复，所以id选择器只能对应于页面上一个元素，不能复用，id名一般给程序使用，所以不推荐使用id作为选择器。</p>
<p><strong>示例代码</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="comment">/* id选择器，以#开头，根据html中的标签，给标签添加样式 */</span></span><br><span class="line">        <span class="selector-id">#myid1</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> id=&quot;myid1&quot;&gt;哈哈&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;!-- 错误示例，在<span class="selector-tag">html</span>中标签的id是唯一的，不能重复，后续js会根据id获取对应的标签对象 --&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> id=&quot;myid1&quot;&gt;嘻嘻&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注意点: 虽然给其它标签设置id&#x3D;“box”也可以设置样式，但是不推荐这样做，因为id是唯一的，以后js通过id只能获取一个唯一的标签对象。</strong></p>
<img src="/2022/10/24/css-%E9%80%89%E6%8B%A9%E5%99%A8/04.png" class title="This is an test image">



<h1 id="七-组选择器"><a href="#七-组选择器" class="headerlink" title="七. 组选择器"></a>七. 组选择器</h1><p>根据组合的选择器选择不同的标签，<strong>以 , 分割开</strong>, 如果有公共的样式设置，可以使用组选择器。</p>
<p><strong>示例代码</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="comment">/* 组选择器就是多个选择器的组合，把功能的代码可以放到组选择器里面 */</span></span><br><span class="line">        <span class="selector-class">.box1</span>, <span class="selector-class">.box2</span>, <span class="selector-class">.box3</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 提示：在css里面出现相同的组选择器，后面的不会覆盖前面的，</span></span><br><span class="line"><span class="comment">        后面的选择器会在前面的选择器的基础上进行追加样式 */</span></span><br><span class="line">        <span class="selector-class">.box1</span>&#123;</span><br><span class="line">            <span class="attribute">background-color</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.box2</span>&#123;</span><br><span class="line">            <span class="attribute">background-color</span>: green;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.box3</span>&#123;</span><br><span class="line">            <span class="attribute">background-color</span>: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;!-- <span class="selector-tag">div</span><span class="selector-class">.box</span>*<span class="number">3</span> --&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;box1&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;box2&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;box3&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure>

<img src="/2022/10/24/css-%E9%80%89%E6%8B%A9%E5%99%A8/05.png" class title="This is an test image">



<h1 id="八-伪类选择器"><a href="#八-伪类选择器" class="headerlink" title="八. 伪类选择器"></a>八. 伪类选择器</h1><p>用于向选择器添加特殊的效果, <strong>以 : 分割开</strong>, 当用户和网站交互的时候改变显示效果可以使用伪类选择器</p>
<p><strong>示例代码</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">div</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: green;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 伪类选择器就是给其他选择器添加特殊效果，表现形式选择器后面加上冒号再跟上伪类的名字 */</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* hover——鼠标悬浮 */</span></span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;哈哈&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure>

<p>鼠标放在空白处：</p>
<img src="/2022/10/24/css-%E9%80%89%E6%8B%A9%E5%99%A8/06.png" class title="This is an test image">



<p>鼠标悬浮后：</p>
<img src="/2022/10/24/css-%E9%80%89%E6%8B%A9%E5%99%A8/07.png" class title="This is an test image">



<h1 id="九-小结"><a href="#九-小结" class="headerlink" title="九. 小结"></a>九. 小结</h1><ul>
<li>css 选择器就是用来选择标签设置样式的</li>
<li>常用的 css 选择器有六种，分别是:<ol>
<li>标签选择器</li>
<li>类选择器</li>
<li>层级选择器(后代选择器)</li>
<li>id选择器</li>
<li>组选择器</li>
<li>伪类选择器</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/07/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>html 列表标签</title>
    <url>/2022/10/14/html-%E5%88%97%E8%A1%A8%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<h1 id="一-列表标签的种类"><a href="#一-列表标签的种类" class="headerlink" title="一. 列表标签的种类"></a>一. 列表标签的种类</h1><ul>
<li>无序列表标签(ul标签)</li>
<li>有序列表标签(ol标签)</li>
</ul>
<h1 id="二-无序列表"><a href="#二-无序列表" class="headerlink" title="二. 无序列表"></a>二. 无序列表</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- ul标签定义无序列表 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;!-- li标签定义列表项目 --&gt;</span><br><span class="line">    &lt;li&gt;列表标题一&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;列表标题二&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;列表标题三&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h1 id="三-有序列表"><a href="#三-有序列表" class="headerlink" title="三. 有序列表"></a>三. 有序列表</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- ol标签定义有序列表 --&gt;</span><br><span class="line">&lt;ol&gt;</span><br><span class="line">    &lt;!-- li标签定义列表项目 --&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;列表标题一&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;列表标题二&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;列表标题三&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure>

<h1 id="四-小结"><a href="#四-小结" class="headerlink" title="四. 小结"></a>四. 小结</h1><img src="/2022/10/14/html-%E5%88%97%E8%A1%A8%E6%A0%87%E7%AD%BE/01.png" class title="This is an test image">

<ul>
<li>列表标签有无序列表标签(ul标签)和有序列表标签(ol标签)</li>
<li>列表项目对顺序有要求的时候使用ol标签</li>
<li>列表项目对顺序无要求的时候使用ul标签</li>
</ul>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>html 基本结构</title>
    <url>/2022/10/12/html-%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="一-html的定义"><a href="#一-html的定义" class="headerlink" title="一. html的定义"></a>一. html的定义</h1><p>HTML 的全称为：HyperText Mark-up Language, 指的是超文本标记语言。<br>标记：就是标签, &lt;标签名称&gt; &lt;&#x2F;标签名称&gt;, 比如: <code>&lt;html&gt;&lt;/html&gt;、&lt;h1&gt;&lt;/h1&gt; </code>等，标签大多数都是成对出现的。<br>所谓超文本，有两层含义:<br>因为网页中还可以图片、视频、音频等内容(超越文本限制)<br>它还可以在网页中跳转到另一个网页，与世界各地主机的网页链接(超链接文本)</p>
<h1 id="二-结构代码"><a href="#二-结构代码" class="headerlink" title="二. 结构代码"></a>二. 结构代码</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>            </span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">          网页显示内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<ol>
<li>第一行<code>&lt;!DOCTYPE html&gt;</code>是文档声明, 用来指定页面所使用的html的版本, 这里声明的是一个html5的文档。</li>
<li><code>&lt;html&gt;...&lt;/html&gt;</code>标签是开发人员在告诉浏览器，整个网页是从<code>&lt;html&gt;</code>这里开始的，到<code>&lt;html&gt;</code>结束,也就是html文档的开始和结束标签。</li>
<li><code>&lt;head&gt;...&lt;/head&gt;</code>标签用于定义文档的头部,是负责对网页进行设置标题、编码格式以及引入css和js文件的。</li>
<li><code>&lt;body&gt;...&lt;/body&gt;</code>标签是编写网页上显示的内容。</li>
</ol>
<h1 id="三-浏览网页文件"><a href="#三-浏览网页文件" class="headerlink" title="三.浏览网页文件"></a>三.浏览网页文件</h1><p>网页文件的后缀是.htm或者.htm, 一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用文本的方式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件渲染成网页。</p>
<h1 id="四-总结"><a href="#四-总结" class="headerlink" title="四. 总结"></a>四. 总结</h1><img src="/2022/10/12/html-%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/01.png" class title="This is an test image">]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>html 常用标签</title>
    <url>/2022/10/14/html-%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<h1 id="一-标签类型"><a href="#一-标签类型" class="headerlink" title="一.标签类型"></a>一.标签类型</h1><p>单标签：只有一个标签，没有标签内容<br>双标签：成对出现的标签</p>
<h1 id="二-常用标签"><a href="#二-常用标签" class="headerlink" title="二.常用标签"></a>二.常用标签</h1><h3 id="双标签"><a href="#双标签" class="headerlink" title="双标签"></a>双标签</h3><p><code>&lt;h1&gt;&lt;/h1&gt;</code>, <code>&lt;h2&gt;&lt;/h2&gt;</code>, <code>&lt;h3&gt;&lt;/h3&gt;</code>—标题标签</p>
<blockquote>
<p>对应一级，二级，三级标签，类似于 MarkDown 语法中的 <code>#</code>, <code> ##</code>, <code> ###</code></p>
</blockquote>
<p><code>&lt;p&gt;&lt;/p&gt;</code> —段落标签</p>
<p><code>&lt;div&gt;&lt;/div&gt;</code> —容器标题</p>
<blockquote>
<p>可以包括其他标签内容</p>
</blockquote>
<p><code>&lt;a href=URL&quot;&quot;&gt;&lt;/a&gt;</code>— 超链接标签</p>
<blockquote>
<p>每一个<a>元素一般都会存在一个href属性，该属性的作用是来设置跳转到指定HTML页面或其他链接的地址。如果使用<a>元素时没有设置href属性的话，那么<a>元素将是无效的。</a></a></a></p>
</blockquote>
<span id="more"></span>
<h3 id="单标签"><a href="#单标签" class="headerlink" title="单标签"></a>单标签</h3><p> <code>&lt;hr&gt;</code>—分割线<br> <code>&lt;br&gt;</code>—空行<br> <code>&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;</code>—图片标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1、成对出现的标签：--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个div标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这个一个段落标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2、单个出现的标签： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/pic.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3、带属性的标签，如src、alt 和 href等都是属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/pic.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 4、标签的嵌套 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/pic.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示:</p>
<ol>
<li><p>标签不区分大小写，但是推荐使用小写。</p>
</li>
<li><p>根据标签的书写形式，标签分为双标签(闭合标签)和单标签(空标签)<br> 2.1 双标签是指由开始标签和结束标签组成的一对标签，这种标签允许嵌套和承载内容，比如: div标签<br> 2.2 单标签是一个标签组成，没有标签内容， 比如: img标签</p>
</li>
</ol>
</blockquote>
<h1 id="三-总结"><a href="#三-总结" class="headerlink" title="三. 总结"></a>三. 总结</h1><ul>
<li>学习 html 语言就是学习标签的用法，常用的标签有20多个。</li>
<li>编写 html 标签建议使用小写</li>
<li>根据书写形式，html 标签分为双标签和单标签</li>
<li>单标签没有标签内容，双标签可以嵌套其它标签和承载文本内容</li>
</ul>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>html 资源路径</title>
    <url>/2022/10/14/html-%E8%B5%84%E6%BA%90%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<p>当我们使用img标签显示图片的时候，需要指定图片的资源路径，比如:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1.jpg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里的src属性就是设置图片的资源路径的，资源路径可以分为相对路径和绝对路径。</p>
<blockquote>
<p>..&#x2F;将遍历到所在目录的父目录<br>用于打开同级别文件夹下的文件<br>先用..&#x2F;返回父目录，再打开另一个文件夹</p>
</blockquote>
<h3 id="1-相对路径"><a href="#1-相对路径" class="headerlink" title="1. 相对路径"></a>1. 相对路径</h3><blockquote>
<p>从当前操作 html 的文档所在目录算起的路径叫做相对路径</p>
</blockquote>
<span id="more"></span>
<p>演示:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 相对路径方式1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/1.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 相对路径方式2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1.jpg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-绝对路径"><a href="#2-绝对路径" class="headerlink" title="2. 绝对路径"></a>2. 绝对路径</h3><blockquote>
<p>从根目录算起的路径叫做绝对路径，Windows 的根目录是指定的盘符，mac OS 和Linux 是&#x2F;</p>
</blockquote>
<p>演示:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绝对路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;D:\My Code\HTML\my first html\img\1.jpg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>提示:</p>
<p>一般都会使用相对路径，绝对路径的操作在其它电脑上打开会有可能出现资源文件找不到的问题</p>
<h3 id="3-小结"><a href="#3-小结" class="headerlink" title="3. 小结"></a>3. 小结</h3><ul>
<li>相对路径和绝对路径是 html 标签使用资源文件的两种方式，一般使用相对路径。</li>
<li>相对路径是从当前操作的 html 文档所在目录算起的路径</li>
<li>绝对 路径是从根目录算起的路径</li>
</ul>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL sql语句</title>
    <url>/2022/10/11/mysql-sql%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h1 id="一-MySQL数据库的介绍"><a href="#一-MySQL数据库的介绍" class="headerlink" title="一. MySQL数据库的介绍"></a>一. MySQL数据库的介绍</h1><p>MySQL是一个关系型数据库管理系统，在 WEB 应用方面，MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件，它是由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品，MySQL 是最流行的关系型数据库管理系统中的一个。</p>
<p><strong>MySQL的特点:</strong></p>
<ol>
<li><p>MySQL是开源的，所以你不需要支付额外的费用。</p>
</li>
<li><p>MySQL支持大型的数据库。可以处理拥有上千万条记录的大型数据库。</p>
</li>
<li><p>MySQL使用标准的SQL数据语言形式。</p>
</li>
<li><p>MySQL可以安装在不同的操作系统，并且提供多种编程语言的操作接口。这些编程语言包括C、C++、Python、Java、Ruby等等。</p>
</li>
</ol>
<h1 id="二-SQL语句"><a href="#二-SQL语句" class="headerlink" title="二 .SQL语句"></a>二 .SQL语句</h1><h2 id="2-1-数据库操作的SQL语句"><a href="#2-1-数据库操作的SQL语句" class="headerlink" title="2.1 数据库操作的SQL语句"></a>2.1 数据库操作的SQL语句</h2><ol>
<li><p>查看所有数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure></li>
</ol>
<span id="more"></span>
<ol start="2">
<li><p>创建数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database 数据库名 charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看当前使用的数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> database();</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> database 数据库名;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="2-2-表结构操作的SQL语句"><a href="#2-2-表结构操作的SQL语句" class="headerlink" title="2.2 表结构操作的SQL语句"></a>2.2 表结构操作的SQL语句</h2><ol>
<li><p>查看当前数据库中所有表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> students(</span><br><span class="line"> id <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"> age tinyint unsigned <span class="keyword">default</span> <span class="number">0</span>,</span><br><span class="line"> height <span class="type">decimal</span>(<span class="number">5</span>,<span class="number">2</span>),</span><br><span class="line"> gender enum(<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;保密&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>说明:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">字段名称 数据类型  可选的约束条件,</span><br><span class="line">column1 datatype contrai,</span><br><span class="line">...</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改表-添加字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 列名 类型 约束;</span><br><span class="line">例：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">add</span> birthday datetime;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改表-修改字段类型</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 列名 类型 约束;</span><br><span class="line">例：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students modify birthday <span class="type">date</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<p>说明:</p>
<ul>
<li>modify: 只能修改字段类型或者约束，不能修改字段名</li>
</ul>
</li>
<li><p>修改表-修改字段名和字段类型</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 原名 新名 类型及约束;</span><br><span class="line">例：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students change birthday birth datetime <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<p>说明:</p>
<ul>
<li>change: 既能对字段重命名又能修改字段类型还能修改约束</li>
</ul>
</li>
<li><p>修改表-删除字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 列名;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看创表SQL语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看创库SQL语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> database 数据库名;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="2-3-表数据操作的SQL语句"><a href="#2-3-表数据操作的SQL语句" class="headerlink" title="2.3 表数据操作的SQL语句"></a>2.3 表数据操作的SQL语句</h2><ol>
<li><p>查询数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 查询所有列</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="comment">-- 2. 查询指定列</span></span><br><span class="line"><span class="keyword">select</span> 列<span class="number">1</span>,列<span class="number">2</span>,... <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 全列插入：值的顺序与表结构字段的顺序完全一一对应</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span> (...)</span><br><span class="line">例:</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">values</span>(<span class="number">0</span>, <span class="string">&#x27;xx&#x27;</span>, <span class="keyword">default</span>, <span class="keyword">default</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="comment">-- 2. 部分列插入：值的顺序与给出的列顺序对应</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 (列<span class="number">1</span>,...) <span class="keyword">values</span>(值<span class="number">1</span>,...)</span><br><span class="line">例:</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students(name, age) <span class="keyword">values</span>(<span class="string">&#x27;王二小&#x27;</span>, <span class="number">15</span>);</span><br><span class="line"><span class="comment">-- 3. 全列多行插入</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(...),(...)...;</span><br><span class="line">例:</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">values</span>(<span class="number">0</span>, <span class="string">&#x27;张飞&#x27;</span>, <span class="number">55</span>, <span class="number">1.75</span>, <span class="string">&#x27;男&#x27;</span>),(<span class="number">0</span>, <span class="string">&#x27;关羽&#x27;</span>, <span class="number">58</span>, <span class="number">1.85</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="comment">-- 4. 部分列多行插入</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(列<span class="number">1</span>,...) <span class="keyword">values</span>(值<span class="number">1</span>,...),(值<span class="number">1</span>,...)...;</span><br><span class="line">例：</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students(name, height) <span class="keyword">values</span>(<span class="string">&#x27;刘备&#x27;</span>, <span class="number">1.75</span>),(<span class="string">&#x27;曹操&#x27;</span>, <span class="number">1.6</span>);</span><br></pre></td></tr></table></figure>

<p>说明:</p>
<ul>
<li>主键列是自动增长，但是在全列插入时需要占位，通常使用空值(0或者null或者default)</li>
<li>在全列插入时，如果字段列有默认值可以使用 default 来占位，插入后的数据就是之前设置的默认值</li>
</ul>
</li>
<li><p>修改数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>,列<span class="number">2</span><span class="operator">=</span>值<span class="number">2.</span>.. <span class="keyword">where</span> 条件</span><br><span class="line">例：</span><br><span class="line"><span class="keyword">update</span> students <span class="keyword">set</span> age <span class="operator">=</span> <span class="number">18</span>, gender <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">6</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件</span><br><span class="line">例：</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> students <span class="keyword">where</span> id<span class="operator">=</span><span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<p>问题:</p>
<p>上面的操作称之为物理删除，一旦删除就不容易恢复，我们可以使用逻辑删除的方式来解决这个问题。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 添加删除表示字段，0表示未删除 1表示删除</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">add</span> isdelete bit <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">-- 逻辑删除数据</span></span><br><span class="line"><span class="keyword">update</span> students <span class="keyword">set</span> isdelete <span class="operator">=</span> <span class="number">1</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">8</span>;</span><br></pre></td></tr></table></figure>

<p>说明:</p>
<ul>
<li>逻辑删除，本质就是修改操作</li>
</ul>
</li>
</ol>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul>
<li>登录数据库: mysql -uroot -p</li>
<li>退出数据库: quit 或者 exit 或者 ctr + d</li>
<li>创建数据库: create database 数据库名 charset&#x3D;utf8;</li>
<li>使用数据库: use 数据库名;</li>
<li>删除数据库: drop database 数据库名;</li>
<li>创建表: create table 表名(字段名 字段类型 约束, …);</li>
<li>修改表-添加字段: alter table 表名 add 字段名 字段类型 约束</li>
<li>修改表-修改字段类型: alter table 表名 modify 字段名 字段类型 约束</li>
<li>修改表-修改字段名和字段类型: alter table 表名 change 原字段名 新字段名 字段类型 约束</li>
<li>修改表-删除字段: alter table 表名 drop 字段名;</li>
<li>删除表: drop table 表名;</li>
<li>查询数据: select * from 表名; 或者 select 列1,列2,… from 表名;</li>
<li>插入数据: insert into 表名 values (…) 或者 insert into 表名 (列1,…) values(值1,…)</li>
<li>修改数据: update 表名 set 列1&#x3D;值1,列2&#x3D;值2… where 条件</li>
<li>删除数据: delete from 表名 where 条件</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Python if语句</title>
    <url>/2022/07/27/python-if%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h1 id="一-if-语法"><a href="#一-if-语法" class="headerlink" title="一. if 语法"></a>一. if 语法</h1><h2 id="1-1-语法"><a href="#1-1-语法" class="headerlink" title="1.1 语法"></a>1.1 语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    条件成立执行的代码<span class="number">1</span></span><br><span class="line">    条件成立执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>


<span id="more"></span>
<h1 id="二-if…else…"><a href="#二-if…else…" class="headerlink" title="二. if…else…"></a>二. if…else…</h1><p>作用：条件成立执行if下方的代码; 条件不成立执行else下方的代码。</p>
<h2 id="2-1-语法"><a href="#2-1-语法" class="headerlink" title="2.1 语法"></a>2.1 语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    条件成立执行的代码<span class="number">1</span></span><br><span class="line">    条件成立执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    条件不成立执行的代码<span class="number">1</span></span><br><span class="line">    条件不成立执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>



<h1 id="三、多重判断"><a href="#三、多重判断" class="headerlink" title="三、多重判断"></a>三、多重判断</h1><h2 id="3-1-语法"><a href="#3-1-语法" class="headerlink" title="3.1 语法"></a>3.1 语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">    条件<span class="number">1</span>成立执行的代码<span class="number">1</span></span><br><span class="line">    条件<span class="number">1</span>成立执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">2</span>：</span><br><span class="line">	条件<span class="number">2</span>成立执行的代码<span class="number">1</span></span><br><span class="line">    条件<span class="number">2</span>成立执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br><span class="line">......</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    以上条件都不成立执行执行的代码</span><br></pre></td></tr></table></figure>

<blockquote>
<p>多重判断也可以和else配合使用。一般else放到整个if语句的最后，表示以上条件都不成立的时候执行的代码。</p>
</blockquote>
<h1 id="四、if嵌套"><a href="#四、if嵌套" class="headerlink" title="四、if嵌套"></a>四、if嵌套</h1><h2 id="4-1-语法"><a href="#4-1-语法" class="headerlink" title="4.1 语法"></a>4.1 语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>：</span><br><span class="line">	条件<span class="number">1</span>成立执行的代码</span><br><span class="line">    条件<span class="number">1</span>成立执行的代码</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> 条件<span class="number">2</span>：</span><br><span class="line">    	条件<span class="number">2</span>成立执行的代码</span><br><span class="line">        条件<span class="number">2</span>成立执行的代码</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：条件2的if也是处于条件1成立执行的代码的缩进关系内部。</p>
</blockquote>
<h1 id="五-三目运算符"><a href="#五-三目运算符" class="headerlink" title="五.  三目运算符"></a>五.  三目运算符</h1><p>三目运算符也叫三元运算符。</p>
<h2 id="5-1-语法"><a href="#5-1-语法" class="headerlink" title="5.1 语法"></a>5.1 语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">值<span class="number">1</span> <span class="keyword">if</span> 条件 <span class="keyword">else</span> 值<span class="number">2</span></span><br></pre></td></tr></table></figure>

<h2 id="5-2-示例"><a href="#5-2-示例" class="headerlink" title="5.2 示例"></a>5.2 示例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>



<h1 id="六-实例–猜拳游戏"><a href="#六-实例–猜拳游戏" class="headerlink" title="六. 实例–猜拳游戏"></a>六. 实例–猜拳游戏</h1><p>需求分析：</p>
<ul>
<li><p>参与游戏的角色</p>
<ul>
<li>玩家<ul>
<li>手动出拳</li>
</ul>
</li>
<li>电脑<ul>
<li>随机出拳</li>
</ul>
</li>
</ul>
</li>
<li><p>判断输赢</p>
<ul>
<li>玩家获胜</li>
</ul>
<table>
<thead>
<tr>
<th>玩家</th>
<th>电脑</th>
</tr>
</thead>
<tbody><tr>
<td>石头</td>
<td>剪刀</td>
</tr>
<tr>
<td>剪刀</td>
<td>布</td>
</tr>
<tr>
<td>布</td>
<td>石头</td>
</tr>
</tbody></table>
<ul>
<li>平局<ul>
<li>玩家出拳 和 电脑出拳相同</li>
</ul>
</li>
<li>电脑获胜</li>
</ul>
</li>
</ul>
<p>随机做法：</p>
<pre><code> 1. 导出random模块
 2. random.randint(开始,结束)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">提示：0-石头，1-剪刀，2-布</span></span><br><span class="line"><span class="string">1. 出拳</span></span><br><span class="line"><span class="string">玩家输入出拳</span></span><br><span class="line"><span class="string">电脑随机出拳</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. 判断输赢</span></span><br><span class="line"><span class="string">玩家获胜</span></span><br><span class="line"><span class="string">平局</span></span><br><span class="line"><span class="string">电脑获胜</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入random模块</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算电脑出拳的随机数字</span></span><br><span class="line">computer = random.randint(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(computer)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换数据类型并赋值</span></span><br><span class="line">player = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请出拳：0-石头，1-剪刀，2-布：&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 玩家胜利 p0:c1 或 p1:c2 或 p2:c0</span></span><br><span class="line"><span class="keyword">if</span> (player == <span class="number">0</span> <span class="keyword">and</span> computer == <span class="number">1</span>) <span class="keyword">or</span> (player == <span class="number">1</span> <span class="keyword">and</span> computer == <span class="number">2</span>) <span class="keyword">or</span> (player == <span class="number">2</span> <span class="keyword">and</span> computer == <span class="number">0</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;玩家获胜&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平局：玩家 == 电脑</span></span><br><span class="line"><span class="keyword">elif</span> player == computer:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;平局&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 玩家失败</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;电脑获胜&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>if语句语法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    条件成立执行的代码</span><br></pre></td></tr></table></figure>

<ul>
<li>if…else…</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    条件成立执行的代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    条件不成立执行的代码</span><br></pre></td></tr></table></figure>

<ul>
<li>多重判断</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">    条件<span class="number">1</span>成立执行的代码</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">2</span>:</span><br><span class="line">    条件<span class="number">2</span>成立执行的代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    以上条件都不成立执行的代码</span><br></pre></td></tr></table></figure>

<ul>
<li>if嵌套</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">    条件<span class="number">1</span>成立执行的代码</span><br><span class="line">    <span class="keyword">if</span> 条件<span class="number">2</span>:</span><br><span class="line">        条件<span class="number">2</span>成立执行的代码</span><br><span class="line">        ....</span><br></pre></td></tr></table></figure>

<ul>
<li>三目运算符</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">值<span class="number">1</span> <span class="keyword">if</span> 条件 <span class="keyword">else</span> 值<span class="number">2</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>PyCharm交互式开发</title>
    <url>/2022/07/19/python-Pycharm%E4%BA%A4%E4%BA%92%E5%BC%8F%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="一-Python交互式的作用"><a href="#一-Python交互式的作用" class="headerlink" title="一.  Python交互式的作用"></a>一.  Python交互式的作用</h1><p>本人使用的IDE 是PyCharm，所以本文介绍Pycharm中，交互式的初级使用方法。</p>
<ul>
<li><p>使用python交互式解释器可以很方便的写一些简单的函数，临时自动化的处理些事情。比如按照某个公式计算结果，将字母全转换成大写&#x2F;小写，计算器。</p>
</li>
<li><p>另一个用例是作为playground实验一些不熟悉的库。比如用 <code>help</code> ， <code>dir</code>，<code>type</code>  查看对象的相关信息等。</p>
</li>
</ul>
<h1 id="二-打开"><a href="#二-打开" class="headerlink" title="二.  打开"></a>二.  打开</h1><p>在PyCharm页面左下角Python控制台(Python Console)<br>自动加载PyCharm已经调试过的解释器</p>
<img src="/2022/07/19/python-Pycharm%E4%BA%A4%E4%BA%92%E5%BC%8F%E5%BC%80%E5%8F%91/console.png" class title="This is an test image">
<span id="more"></span>
<h1 id="三-清空"><a href="#三-清空" class="headerlink" title="三.  清空"></a>三.  清空</h1><p>Python交互式只适合简单程序的调试，代码储存在内存中，将其清空需要关闭项目，再次即清空</p>
<img src="/2022/07/19/python-Pycharm%E4%BA%A4%E4%BA%92%E5%BC%8F%E5%BC%80%E5%8F%91/clean.png" class title="This is an test image">

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>Python交互式适合临时简单程序测试，不适合储存代码</li>
<li>Python交互式代码仅储存在内存中</li>
<li>Python交互式清空需关闭项目</li>
</ul>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 公共操作</title>
    <url>/2022/08/13/python-%E5%85%AC%E5%85%B1%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="一-运算符"><a href="#一-运算符" class="headerlink" title="一. 运算符"></a>一. 运算符</h1><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">支持的容器类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">合并</td>
<td align="center">字符串、列表、元组</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">复制</td>
<td align="center">字符串、列表、元组</td>
</tr>
<tr>
<td align="center">in</td>
<td align="center">元素是否存在</td>
<td align="center">字符串、列表、元组、字典</td>
</tr>
<tr>
<td align="center">not in</td>
<td align="center">元素是否不存在</td>
<td align="center">字符串、列表、元组、字典</td>
</tr>
</tbody></table>
<span id="more"></span>
<h2 id="1-1"><a href="#1-1" class="headerlink" title="1.1 +"></a>1.1 +</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串 </span></span><br><span class="line">str1 = <span class="string">&#x27;aa&#x27;</span></span><br><span class="line">str2 = <span class="string">&#x27;bb&#x27;</span></span><br><span class="line">str3 = str1 + str2</span><br><span class="line"><span class="built_in">print</span>(str3)  <span class="comment"># aabb</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 列表 </span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">list2 = [<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">list3 = list1 + list2</span><br><span class="line"><span class="built_in">print</span>(list3)  <span class="comment"># [1, 2, 10, 20]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 元组 </span></span><br><span class="line">t1 = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">t2 = (<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">t3 = t1 + t2</span><br><span class="line"><span class="built_in">print</span>(t3)  <span class="comment"># (10, 20, 100, 200)</span></span><br></pre></td></tr></table></figure>

<h2 id="1-2"><a href="#1-2" class="headerlink" title="1.2 *"></a>1.2 *</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">10</span>)  <span class="comment"># ----------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">list1 = [<span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(list1 * <span class="number">4</span>)  <span class="comment"># [&#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 元组</span></span><br><span class="line">t1 = (<span class="string">&#x27;world&#x27;</span>,)</span><br><span class="line"><span class="built_in">print</span>(t1 * <span class="number">4</span>)  <span class="comment"># (&#x27;world&#x27;, &#x27;world&#x27;, &#x27;world&#x27;, &#x27;world&#x27;)</span></span><br></pre></td></tr></table></figure>

<h2 id="1-3-in或not-in"><a href="#1-3-in或not-in" class="headerlink" title="1.3 in或not in"></a>1.3 in或not in</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;abcd&#x27;</span>)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;abcd&#x27;</span>)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">list1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> list1)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> list1)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 元组</span></span><br><span class="line">t1 = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;aa&#x27;</span> <span class="keyword">in</span> t1)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;aa&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> t1)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>



<h1 id="二-公共方法"><a href="#二-公共方法" class="headerlink" title="二. 公共方法"></a>二. 公共方法</h1><table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>len()</td>
<td>计算容器中元素个数</td>
</tr>
<tr>
<td>del 或 del()</td>
<td>删除</td>
</tr>
<tr>
<td>max()</td>
<td>返回容器中元素最大值</td>
</tr>
<tr>
<td>min()</td>
<td>返回容器中元素最小值</td>
</tr>
<tr>
<td>range(start, end, step)</td>
<td>生成从start到end的数字，步长为 step，供for循环使用</td>
</tr>
<tr>
<td>enumerate()</td>
<td>函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</td>
</tr>
</tbody></table>
<h2 id="2-1-len"><a href="#2-1-len" class="headerlink" title="2.1 len()"></a>2.1 len()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串</span></span><br><span class="line">str1 = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(str1))  <span class="comment"># 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(list1))  <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 元组</span></span><br><span class="line">t1 = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(t1))  <span class="comment"># 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 集合</span></span><br><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s1))  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 字典</span></span><br><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Rose&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(dict1))  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure>

<h2 id="2-2-del"><a href="#2-2-del" class="headerlink" title="2.2 del()"></a>2.2 del()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串</span></span><br><span class="line">str1 = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line"><span class="keyword">del</span> str1</span><br><span class="line"><span class="built_in">print</span>(str1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line"><span class="keyword">del</span>(list1[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(list1)  <span class="comment"># [20, 30, 40]</span></span><br></pre></td></tr></table></figure>

<h2 id="2-3-max"><a href="#2-3-max" class="headerlink" title="2.3 max()"></a>2.3 max()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串</span></span><br><span class="line">str1 = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(str1))  <span class="comment"># g</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(list1))  <span class="comment"># 40</span></span><br></pre></td></tr></table></figure>

<h2 id="2-4-min"><a href="#2-4-min" class="headerlink" title="2.4 min()"></a>2.4 min()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串</span></span><br><span class="line">str1 = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(str1))  <span class="comment"># a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(list1))  <span class="comment"># 10</span></span><br></pre></td></tr></table></figure>

<h2 id="2-5-range"><a href="#2-5-range" class="headerlink" title="2.5 range()"></a>2.5 range()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 3 5 7 9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：range()生成的序列不包含end数字。</p>
</blockquote>
<h2 id="2-6-enumerate"><a href="#2-6-enumerate" class="headerlink" title="2.6 enumerate()"></a>2.6 enumerate()</h2><ul>
<li>语法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enumerate</span>(可遍历对象, start=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：start参数用来设置遍历数据的下标的起始值，默认为0。</p>
</blockquote>
<ul>
<li>演示</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">enumerate</span>(list1):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(list1, start=<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;下标是<span class="subst">&#123;index&#125;</span>, 对应的字符是<span class="subst">&#123;char&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<img src="/2022/08/13/python-%E5%85%AC%E5%85%B1%E6%93%8D%E4%BD%9C/01.png" class title="This is an test image">



<h1 id="三-容器类型转换"><a href="#三-容器类型转换" class="headerlink" title="三. 容器类型转换"></a>三. 容器类型转换</h1><h2 id="3-1-tuple"><a href="#3-1-tuple" class="headerlink" title="3.1 tuple()"></a>3.1 tuple()</h2><p>作用：将某个序列转换成元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">20</span>]</span><br><span class="line">s1 = &#123;<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(list1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(s1))</span><br></pre></td></tr></table></figure>

<img src="/2022/08/13/python-%E5%85%AC%E5%85%B1%E6%93%8D%E4%BD%9C/02.png" class title="This is an test image">

<h2 id="3-2-list"><a href="#3-2-list" class="headerlink" title="3.2 list()"></a>3.2 list()</h2><p>作用：将某个序列转换成列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1 = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">s1 = &#123;<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(t1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(s1))</span><br></pre></td></tr></table></figure>

<img src="/2022/08/13/python-%E5%85%AC%E5%85%B1%E6%93%8D%E4%BD%9C/03.png" class title="This is an test image">

<h2 id="3-3-set"><a href="#3-3-set" class="headerlink" title="3.3 set()"></a>3.3 set()</h2><p>作用：将某个序列转换成集合</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">20</span>]</span><br><span class="line">t1 = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(list1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(t1))</span><br></pre></td></tr></table></figure>

<img src="/2022/08/13/python-%E5%85%AC%E5%85%B1%E6%93%8D%E4%BD%9C/04.png" class title="This is an test image">
<blockquote>
<p>注意：</p>
</blockquote>
<pre><code> 1. 集合可以快速完成列表去重
 2. 集合不支持下标
</code></pre>
<h1 id="四-总结"><a href="#四-总结" class="headerlink" title="四. 总结"></a>四. 总结</h1><ul>
<li>运算符<ul>
<li><ul>
<li></li>
</ul>
</li>
<li>in &#x2F; not in</li>
</ul>
</li>
<li>公共方法<ul>
<li>len()</li>
<li>del()</li>
<li>range()</li>
<li>enumerate()</li>
</ul>
</li>
<li>数据类型转换<ul>
<li>tuple()</li>
<li>list()</li>
<li>set()</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 函数（一）</title>
    <url>/2022/08/17/python-%E5%87%BD%E6%95%B01/</url>
    <content><![CDATA[<h1 id="一-函数的作用"><a href="#一-函数的作用" class="headerlink" title="一. 函数的作用"></a>一. 函数的作用</h1><p>函数就是将一段具有独立功能的代码块 整合到一个整体并命名，在需要的位置调用这个名称即可完成对应的需求。</p>
<blockquote>
<p>函数在开发过程中，可以更高效的实现代码重用。</p>
</blockquote>
<h1 id="二-函数的使用步骤"><a href="#二-函数的使用步骤" class="headerlink" title="二. 函数的使用步骤"></a>二. 函数的使用步骤</h1><h2 id="2-1-定义函数"><a href="#2-1-定义函数" class="headerlink" title="2.1 定义函数"></a>2.1 定义函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">参数</span>):</span><br><span class="line">    代码<span class="number">1</span></span><br><span class="line">    代码<span class="number">2</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>

<ol>
<li>搭建整体框架(复现需求)</li>
<li>确定“选择功能”界面内容</li>
<li>封装”选择功能”</li>
<li>调用函数<span id="more"></span></li>
</ol>
<h2 id="2-2-调用函数"><a href="#2-2-调用函数" class="headerlink" title="2.2 调用函数"></a>2.2 调用函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">函数名(参数)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<ol>
<li>不同的需求，参数可有可无。</li>
<li>在Python中，函数必须先定义后使用。</li>
</ol>
</blockquote>
<h1 id="三-函数的返回值作用"><a href="#三-函数的返回值作用" class="headerlink" title="三.函数的返回值作用"></a>三.函数的返回值作用</h1><p>在函数中，如果需要返回结果给用户需要使用函数返回值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用变量保存函数返回值</span></span><br><span class="line">a = hello()</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment">#5</span></span><br></pre></td></tr></table></figure>

<h2 id="3-1-应用"><a href="#3-1-应用" class="headerlink" title="3.1 应用"></a>3.1 应用</h2><p>需求：制作一个计算器，计算任意两数字之和，并保存结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_num</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用result变量保存函数返回值</span></span><br><span class="line">result = sum_num(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment">#3</span></span><br></pre></td></tr></table></figure>



<h1 id="四-函数的说明文档"><a href="#四-函数的说明文档" class="headerlink" title="四.函数的说明文档"></a>四.函数的说明文档</h1><blockquote>
<p>函数的说明文档也叫函数的文档说明。</p>
</blockquote>
<h2 id="4-1-语法"><a href="#4-1-语法" class="headerlink" title="4.1 语法"></a>4.1 语法</h2><ul>
<li>定义函数的说明文档</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">参数</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 说明文档的位置 &quot;&quot;&quot;</span></span><br><span class="line">    代码</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>

<ul>
<li>查看函数的说明文档</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(函数名)</span><br></pre></td></tr></table></figure>

<h2 id="4-2-演示"><a href="#4-2-演示" class="headerlink" title="4.2 演示"></a>4.2 演示</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_num</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 求和函数 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="built_in">help</span>(sum_num)</span><br></pre></td></tr></table></figure>

<img src="/2022/08/17/python-%E5%87%BD%E6%95%B01/04.png" class title="This is an test image">

<h1 id="五-函数嵌套调用"><a href="#五-函数嵌套调用" class="headerlink" title="五.函数嵌套调用"></a>五.函数嵌套调用</h1><p>所谓函数嵌套调用指的是一个函数里面又调用了另外一个函数。</p>
<ul>
<li>示例</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">testB</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---- testB start----&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这里是testB函数执行的代码...(省略)...&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---- testB end----&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testA</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---- testA start----&#x27;</span>)</span><br><span class="line">    testB()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---- testA end----&#x27;</span>)</span><br><span class="line"></span><br><span class="line">testA()</span><br></pre></td></tr></table></figure>

<ul>
<li>效果</li>
</ul>
<img src="/2022/08/17/python-%E5%87%BD%E6%95%B01/01.png" class title="This is an test image">

<blockquote>
<ul>
<li>如果函数A中，调用了另外一个函数B，那么先把函数B中的任务都执行完毕之后才会回到上次 函数A执行的位置。</li>
</ul>
</blockquote>
<h1 id="六-函数应用"><a href="#六-函数应用" class="headerlink" title="六. 函数应用"></a>六. 函数应用</h1><h2 id="6-1-打印图形"><a href="#6-1-打印图形" class="headerlink" title="6.1 打印图形"></a>6.1 打印图形</h2><ol>
<li>打印一条横线</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_line</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print_line()</span><br></pre></td></tr></table></figure>

<img src="/2022/08/17/python-%E5%87%BD%E6%95%B01/02.png" class title="This is an test image">

<ol start="2">
<li>打印多条横线</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_line</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_lines</span>(<span class="params">num</span>):</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; num:</span><br><span class="line">        print_line()</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print_lines(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<img src="/2022/08/17/python-%E5%87%BD%E6%95%B01/03.png" class title="This is an test image">

<h2 id="6-2-函数计算"><a href="#6-2-函数计算" class="headerlink" title="6.2 函数计算"></a>6.2 函数计算</h2><ol>
<li>求三个数之和</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_num</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = sum_num(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 6</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>求三个数平均值</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">average_num</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    sumResult = sum_num(a, b, c)</span><br><span class="line">    <span class="keyword">return</span> sumResult / <span class="number">3</span></span><br><span class="line"></span><br><span class="line">result = average_num(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 2.0</span></span><br></pre></td></tr></table></figure>

<h1 id="七-总结"><a href="#七-总结" class="headerlink" title="七. 总结"></a>七. 总结</h1><ul>
<li><p>函数的作用：封装代码，高效的代码重用</p>
</li>
<li><p>函数使用步骤</p>
<ul>
<li>定义函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>():</span><br><span class="line">    代码<span class="number">1</span></span><br><span class="line">    代码<span class="number">2</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<ul>
<li>调用函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">函数名()</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数的参数：函数调用的时候可以传入真实数据，增大函数的使用的灵活性</p>
<ul>
<li>形参：函数定义时书写的参数(非真实数据)</li>
<li>实参：函数调用时书写的参数(真实数据)</li>
</ul>
</li>
<li><p>函数的返回值</p>
<ul>
<li>作用：函数调用后，返回需要的计算结果</li>
<li>写法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> 表达式</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数的说明文档</p>
<ul>
<li>作用：保存函数解释说明的信息</li>
<li>写法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 函数说明文档 &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>函数嵌套调用：一个函数内部嵌套调用另外一个函数</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 函数（二）</title>
    <url>/2022/08/19/python-%E5%87%BD%E6%95%B02/</url>
    <content><![CDATA[<h1 id="一-变量作用域"><a href="#一-变量作用域" class="headerlink" title="一. 变量作用域"></a>一. 变量作用域</h1><p>变量作用域指的是变量生效的范围，主要分为两类：局部变量和全局变量。</p>
<ul>
<li>局部变量</li>
</ul>
<p>所谓局部变量是定义在函数体内部的变量，即只在函数体内部生效。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">testA</span>():</span><br><span class="line">    a = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">testA()  <span class="comment"># 100</span></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 报错：name &#x27;a&#x27; is not defined</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>变量a是定义在<code>testA</code>函数内部的变量，在函数外部访问则立即报错。</p>
</blockquote>
<span id="more"></span>
<p>局部变量的作用：在函数体内部，临时保存数据，即当函数调用完成后，则销毁局部变量。</p>
<ul>
<li>全局变量</li>
</ul>
<p>所谓全局变量，指的是在函数体内、外都能生效的变量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义全局变量a</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testA</span>():</span><br><span class="line">    <span class="built_in">print</span>(a)  <span class="comment"># 访问全局变量a，并打印变量a存储的数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testB</span>():</span><br><span class="line">    <span class="built_in">print</span>(a)  <span class="comment"># 访问全局变量a，并打印变量a存储的数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">testA()  <span class="comment"># 100</span></span><br><span class="line">testB()  <span class="comment"># 100</span></span><br></pre></td></tr></table></figure>

<h3 id="如何在函数体内部修改全局变量？？"><a href="#如何在函数体内部修改全局变量？？" class="headerlink" title="如何在函数体内部修改全局变量？？"></a>如何在函数体内部修改全局变量？？</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testA</span>():</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testB</span>():</span><br><span class="line">    <span class="comment"># global 关键字声明a是全局变量</span></span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a = <span class="number">200</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">testA()  <span class="comment"># 100</span></span><br><span class="line">testB()  <span class="comment"># 200</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;全局变量a = <span class="subst">&#123;a&#125;</span>&#x27;</span>)  <span class="comment"># 全局变量a = 200</span></span><br></pre></td></tr></table></figure>

<h1 id="二-多函数程序执行流程"><a href="#二-多函数程序执行流程" class="headerlink" title="二. 多函数程序执行流程"></a>二. 多函数程序执行流程</h1><p>一般在实际开发过程中，一个程序往往由多个函数（后面知识中会讲解类）组成，并且多个函数共享某些数据，如下所示：</p>
<ul>
<li>共用全局变量</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 定义全局变量</span></span><br><span class="line">glo_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="keyword">global</span> glo_num</span><br><span class="line">    <span class="comment"># 修改全局变量</span></span><br><span class="line">    glo_num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    <span class="comment"># 调用test1函数中修改后的全局变量</span></span><br><span class="line">    <span class="built_in">print</span>(glo_num)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 调用test1函数，执行函数内部代码：声明和修改全局变量</span></span><br><span class="line">test1()</span><br><span class="line"><span class="comment"># 3. 调用test2函数，执行函数内部代码：打印</span></span><br><span class="line">test2()  <span class="comment"># 100</span></span><br></pre></td></tr></table></figure>

<ul>
<li>返回值作为参数传递</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">50</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 保存函数test1的返回值</span></span><br><span class="line">result = test1()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.将函数返回值所在变量作为参数传递到test2函数</span></span><br><span class="line">test2(result)  <span class="comment"># 50</span></span><br></pre></td></tr></table></figure>

<h1 id="三-函数的返回值"><a href="#三-函数的返回值" class="headerlink" title="三. 函数的返回值"></a>三. 函数的返回值</h1><p>思考：如果一个函数如些两个return (如下所示)，程序如何执行？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">return_num</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = return_num()</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>

<p>答：只执行了第一个return，原因是因为return可以退出当前函数，导致return下方的代码不执行。</p>
<p>如果一个函数要有多个返回值，以如下格式书写。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">return_num</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = return_num()</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># (1, 2)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<ol>
<li><code>return a, b</code>写法，返回多个数据的时候，默认是元组类型。</li>
<li>return后面可以连接列表、元组或字典，以返回多个值。</li>
</ol>
</blockquote>
<h1 id="四-函数的参数"><a href="#四-函数的参数" class="headerlink" title="四. 函数的参数"></a>四. 函数的参数</h1><h2 id="4-1-位置参数"><a href="#4-1-位置参数" class="headerlink" title="4.1 位置参数"></a>4.1 位置参数</h2><p>位置参数：调用函数时根据函数定义的参数位置来传递参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>(<span class="params">name, age, gender</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的名字是<span class="subst">&#123;name&#125;</span>, 年龄是<span class="subst">&#123;age&#125;</span>, 性别是<span class="subst">&#123;gender&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_info(<span class="string">&#x27;TOM&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;男&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：传递和定义参数的顺序及个数必须一致。</p>
</blockquote>
<h2 id="4-2-关键字参数"><a href="#4-2-关键字参数" class="headerlink" title="4.2 关键字参数"></a>4.2 关键字参数</h2><p>函数调用，通过“键&#x3D;值”形式加以指定。可以让函数更加清晰、容易使用，同时也清除了参数的顺序需求。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>(<span class="params">name, age, gender</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的名字是<span class="subst">&#123;name&#125;</span>, 年龄是<span class="subst">&#123;age&#125;</span>, 性别是<span class="subst">&#123;gender&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_info(<span class="string">&#x27;Rose&#x27;</span>, age=<span class="number">20</span>, gender=<span class="string">&#x27;女&#x27;</span>)</span><br><span class="line">user_info(<span class="string">&#x27;小明&#x27;</span>, gender=<span class="string">&#x27;男&#x27;</span>, age=<span class="number">16</span>)</span><br></pre></td></tr></table></figure>

<p>注意：<strong>函数调用时，如果有位置参数时，位置参数必须在关键字参数的前面，但关键字参数之间不存在先后顺序。</strong></p>
<h2 id="4-3-缺省参数"><a href="#4-3-缺省参数" class="headerlink" title="4.3 缺省参数"></a>4.3 缺省参数</h2><p>缺省参数也叫默认参数，用于定义函数，为参数提供默认值，调用函数时可不传该默认参数的值（注意：所有位置参数必须出现在默认参数前，包括函数定义和调用）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>(<span class="params">name, age, gender=<span class="string">&#x27;男&#x27;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的名字是<span class="subst">&#123;name&#125;</span>, 年龄是<span class="subst">&#123;age&#125;</span>, 性别是<span class="subst">&#123;gender&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_info(<span class="string">&#x27;TOM&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">user_info(<span class="string">&#x27;Rose&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;女&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：函数调用时，如果为缺省参数传值则修改默认参数值；否则使用这个默认值。</p>
</blockquote>
<h2 id="4-4-不定长参数"><a href="#4-4-不定长参数" class="headerlink" title="4.4 不定长参数"></a>4.4 不定长参数</h2><p>不定长参数也叫可变参数。用于不确定调用的时候会传递多少个参数(不传参也可以)的场景。此时，可用包裹(packing)位置参数，或者包裹关键字参数，来进行参数传递，会显得非常方便。</p>
<ul>
<li>包裹位置传递</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># (&#x27;TOM&#x27;,)</span></span><br><span class="line">user_info(<span class="string">&#x27;TOM&#x27;</span>)</span><br><span class="line"><span class="comment"># (&#x27;TOM&#x27;, 18)</span></span><br><span class="line">user_info(<span class="string">&#x27;TOM&#x27;</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：传进的所有参数都会被args变量收集，它会根据传进参数的位置合并为一个元组(tuple)，args是元组类型，这就是包裹位置传递。</p>
</blockquote>
<ul>
<li>包裹关键字传递</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;TOM&#x27;, &#x27;age&#x27;: 18, &#x27;id&#x27;: 110&#125;</span></span><br><span class="line">user_info(name=<span class="string">&#x27;TOM&#x27;</span>, age=<span class="number">18</span>, <span class="built_in">id</span>=<span class="number">110</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>综上：无论是包裹位置传递还是包裹关键字传递，都是一个组包的过程。</p>
</blockquote>
<h1 id="五-拆包和交换变量值"><a href="#五-拆包和交换变量值" class="headerlink" title="五. 拆包和交换变量值"></a>五. 拆包和交换变量值</h1><h2 id="5-1-拆包"><a href="#5-1-拆包" class="headerlink" title="5.1 拆包"></a>5.1 拆包</h2><ul>
<li>拆包：元组</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">return_num</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>, <span class="number">200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num1, num2 = return_num()</span><br><span class="line"><span class="built_in">print</span>(num1)  <span class="comment"># 100</span></span><br><span class="line"><span class="built_in">print</span>(num2)  <span class="comment"># 200</span></span><br></pre></td></tr></table></figure>

<ul>
<li>拆包：字典</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;TOM&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line">a, b = dict1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对字典进行拆包，取出来的是字典的key</span></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># name</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># age</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dict1[a])  <span class="comment"># TOM</span></span><br><span class="line"><span class="built_in">print</span>(dict1[b])  <span class="comment"># 18</span></span><br></pre></td></tr></table></figure>



<h2 id="5-2-交换变量值"><a href="#5-2-交换变量值" class="headerlink" title="5.2 交换变量值"></a>5.2 交换变量值</h2><p>需求：有变量<code>a = 10</code>和<code>b = 20</code>，交换两个变量的值。</p>
<ul>
<li>方法一</li>
</ul>
<p>借助第三变量存储数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 定义中间变量</span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 将a的数据存储到c</span></span><br><span class="line">c = a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 将b的数据20赋值到a，此时a = 20</span></span><br><span class="line">a = b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 将之前c的数据10赋值到b，此时b = 10</span></span><br><span class="line">b = c</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 20</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 10</span></span><br></pre></td></tr></table></figure>

<ul>
<li>方法二（多数用这个）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">a, b = b, a</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>

<h1 id="六-引用"><a href="#六-引用" class="headerlink" title="六. 引用"></a>六. 引用</h1><h2 id="6-1-了解引用"><a href="#6-1-了解引用" class="headerlink" title="6.1 了解引用"></a>6.1 了解引用</h2><p>在python中，值是靠引用来传递来的。</p>
<p><strong>我们可以用<code>id()</code>来判断两个变量是否为同一个值的引用。</strong> 我们可以将id值理解为那块内存的地址标识。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. int类型</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = a</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))  <span class="comment"># 140708464157520</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(b))  <span class="comment"># 140708464157520</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 1,说明int类型为不可变类型 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))  <span class="comment"># 140708464157552，此时得到是的数据2的内存地址</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(b))  <span class="comment"># 140708464157520</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">aa = [<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">bb = aa</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(aa))  <span class="comment"># 2325297783432</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(bb))  <span class="comment"># 2325297783432</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">aa.append(<span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(bb)  <span class="comment"># [10, 20, 30], 列表为可变类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(aa))  <span class="comment"># 2325297783432</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(bb))  <span class="comment"># 2325297783432</span></span><br></pre></td></tr></table></figure>

<h2 id="6-2-引用当做实参"><a href="#6-2-引用当做实参" class="headerlink" title="6.2 引用当做实参"></a>6.2 引用当做实参</h2><p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"></span><br><span class="line">    a += a</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># int：计算前后id值不同</span></span><br><span class="line">b = <span class="number">100</span></span><br><span class="line">test1(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表：计算前后id值相同</span></span><br><span class="line">c = [<span class="number">11</span>, <span class="number">22</span>]</span><br><span class="line">test1(c)</span><br></pre></td></tr></table></figure>

<img src="/2022/08/19/python-%E5%87%BD%E6%95%B02/01.png" class title="This is an test image">



<h1 id="七-可变和不可变类型"><a href="#七-可变和不可变类型" class="headerlink" title="七. 可变和不可变类型"></a>七. 可变和不可变类型</h1><p>所谓可变类型与不可变类型是指：数据能够直接进行修改，如果能直接修改那么就是可变，否则是不可变.</p>
<ul>
<li>可变类型<ul>
<li>列表</li>
<li>字典</li>
<li>集合</li>
</ul>
</li>
<li>不可变类型<ul>
<li>整型</li>
<li>浮点型</li>
<li>字符串</li>
<li>元组</li>
</ul>
</li>
</ul>
<h1 id="八-总结"><a href="#八-总结" class="headerlink" title="八. 总结"></a>八. 总结</h1><ul>
<li>变量作用域<ul>
<li>全局：函数体内外都能生效</li>
<li>局部：当前函数体内部生效</li>
</ul>
</li>
<li>函数多返回值写法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> 表达式<span class="number">1</span>, 表达式<span class="number">2.</span>..</span><br></pre></td></tr></table></figure>

<ul>
<li>函数的参数<ul>
<li>位置参数<ul>
<li>形参和实参的个数和书写顺序必须一致</li>
</ul>
</li>
<li>关键字参数<ul>
<li>写法： <code>key=value</code></li>
<li>特点：形参和实参的书写顺序可以不一致；关键字参数必须书写在位置参数的后面</li>
</ul>
</li>
<li>缺省参数<ul>
<li>缺省参数就是默认参数</li>
<li>写法：<code>key=vlaue</code></li>
</ul>
</li>
<li>不定长位置参数<ul>
<li>收集所有位置参数，返回一个元组</li>
</ul>
</li>
<li>不定长关键字参数<ul>
<li>收集所有关键字参数，返回一个字典</li>
</ul>
</li>
</ul>
</li>
<li>引用：Python中，数据的传递都是通过引用</li>
</ul>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 函数加强</title>
    <url>/2022/08/21/python-%E5%87%BD%E6%95%B0%E5%8A%A0%E5%BC%BA/</url>
    <content><![CDATA[<h1 id="函数加强"><a href="#函数加强" class="headerlink" title="函数加强"></a>函数加强</h1><h3 id="1-递归"><a href="#1-递归" class="headerlink" title="1. 递归"></a>1. 递归</h3><h3 id="2-lambda-表达式"><a href="#2-lambda-表达式" class="headerlink" title="2. lambda 表达式"></a>2. lambda 表达式</h3><h3 id="3-高阶函数"><a href="#3-高阶函数" class="headerlink" title="3. 高阶函数"></a>3. 高阶函数</h3><span id="more"></span>

<h1 id="一-递归"><a href="#一-递归" class="headerlink" title="一.  递归"></a>一.  递归</h1><h2 id="1-1-递归的应用场景"><a href="#1-1-递归的应用场景" class="headerlink" title="1.1 递归的应用场景"></a>1.1 递归的应用场景</h2><p>递归是一种编程思想，应用场景：</p>
<ol>
<li>在我们日常开发中，如果要遍历一个文件夹下面所有的文件，通常会使用递归来实现；</li>
</ol>
<h2 id="1-2-递归的特点"><a href="#1-2-递归的特点" class="headerlink" title="1.2 递归的特点"></a>1.2 递归的特点</h2><ul>
<li><p>函数内部自己调用自己</p>
</li>
<li><p>必须有出口</p>
<p><strong>代码演示</strong></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3 + 2 + 1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_numbers</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="comment"># 1.如果是1，直接返回1 -- 出口</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># 2.如果不是1，重复执行累加并返回结果</span></span><br><span class="line">    <span class="keyword">return</span> num + sum_numbers(num-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sum_result = sum_numbers(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 输出结果为6</span></span><br><span class="line"><span class="built_in">print</span>(sum_result)</span><br></pre></td></tr></table></figure>

<ul>
<li>执行结果</li>
</ul>
<h1 id="二-lambda-表达式"><a href="#二-lambda-表达式" class="headerlink" title="二. lambda 表达式"></a>二. lambda 表达式</h1><h2 id="2-1-lambda的应用场景"><a href="#2-1-lambda的应用场景" class="headerlink" title="2.1 lambda的应用场景"></a>2.1 lambda的应用场景</h2><p>如果一个函数有一个返回值，并且只有一句代码，可以使用 lambda简化。</p>
<h2 id="2-2-lambda语法"><a href="#2-2-lambda语法" class="headerlink" title="2.2 lambda语法"></a>2.2 lambda语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> 参数列表 ： 表达式</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意</p>
</blockquote>
<ul>
<li>lambda表达式的参数可有可无，函数的参数在lambda表达式中完全适用。</li>
<li>lambda表达式能接收任何数量的参数但只能返回一个表达式的值。</li>
</ul>
<h3 id="函数对比——计算a-b"><a href="#函数对比——计算a-b" class="headerlink" title="函数对比——计算a + b"></a>函数对比——计算a + b</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line">result = add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># lambda表达式</span></span><br><span class="line">fn1 = <span class="keyword">lambda</span> a, b: a + b</span><br><span class="line"><span class="built_in">print</span>(fn1(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：直接打印lambda表达式，输出的是此lambda的内存地址</p>
</blockquote>
<h2 id="2-4-lambda的参数形式"><a href="#2-4-lambda的参数形式" class="headerlink" title="2.4 lambda的参数形式"></a>2.4 lambda的参数形式</h2><h3 id="2-4-1-无参数"><a href="#2-4-1-无参数" class="headerlink" title="2.4.1.无参数"></a>2.4.1.无参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span>: <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(fn1())</span><br></pre></td></tr></table></figure>

<h3 id="2-4-2-一个参数"><a href="#2-4-2-一个参数" class="headerlink" title="2.4.2.一个参数"></a>2.4.2.一个参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span> a: a</span><br><span class="line"><span class="built_in">print</span>(fn1(<span class="string">&#x27;hello world&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="2-4-3-默认参数"><a href="#2-4-3-默认参数" class="headerlink" title="2.4.3.默认参数"></a>2.4.3.默认参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span> a, b, c=<span class="number">100</span>: a + b + c</span><br><span class="line"><span class="built_in">print</span>(fn1(<span class="number">10</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure>

<h3 id="2-4-4-可变参数：-args"><a href="#2-4-4-可变参数：-args" class="headerlink" title="2.4.4.可变参数：*args"></a>2.4.4.可变参数：*args</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span> *args: args</span><br><span class="line"><span class="built_in">print</span>(fn1(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：这里的可变参数传入到lambda之后，返回值为元组。</p>
</blockquote>
<h3 id="2-4-5-可变参数：-kwargs"><a href="#2-4-5-可变参数：-kwargs" class="headerlink" title="2.4.5.可变参数：**kwargs"></a>2.4.5.可变参数：**kwargs</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span> **kwargs: kwargs</span><br><span class="line"><span class="built_in">print</span>(fn1(name=<span class="string">&#x27;python&#x27;</span>, age=<span class="number">20</span>))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：这里的可变参数传入到lambda之后，返回值为字典。</p>
</blockquote>
<h2 id="2-5-lambda的应用"><a href="#2-5-lambda的应用" class="headerlink" title="2.5 lambda的应用"></a>2.5 lambda的应用</h2><h3 id="2-5-1-带判断的lambda"><a href="#2-5-1-带判断的lambda" class="headerlink" title="2.5.1. 带判断的lambda"></a>2.5.1. 带判断的lambda</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span> a, b: a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line"><span class="built_in">print</span>(fn1(<span class="number">1000</span>, <span class="number">500</span>))</span><br></pre></td></tr></table></figure>

<h3 id="2-5-2-列表数据按字典key的值排序"><a href="#2-5-2-列表数据按字典key的值排序" class="headerlink" title="2.5.2. 列表数据按字典key的值排序"></a>2.5.2. 列表数据按字典key的值排序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">students = [</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;TOM&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;ROSE&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">19</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">22</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按name值升序排列</span></span><br><span class="line">students.sort(key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(students)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按name值降序排列</span></span><br><span class="line">students.sort(key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;name&#x27;</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(students)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按age值升序排列</span></span><br><span class="line">students.sort(key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;age&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(students)</span><br></pre></td></tr></table></figure>



<h1 id="三-高阶函数"><a href="#三-高阶函数" class="headerlink" title="三. 高阶函数"></a>三. 高阶函数</h1><p>把函数作为参数传入，这样的函数称为高阶函数，高阶函数是函数式编程的体现。函数式编程就是指这种高度抽象的编程范式。</p>
<h2 id="3-1-体验高阶函数"><a href="#3-1-体验高阶函数" class="headerlink" title="3.1 体验高阶函数"></a>3.1 体验高阶函数</h2><p>在Python中，<code>abs()</code>函数可以完成对数字求绝对值计算。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">abs</span>(-<span class="number">10</span>)  <span class="comment"># 10</span></span><br></pre></td></tr></table></figure>

<p><code>round()</code>函数可以完成对数字的四舍五入计算。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">round</span>(<span class="number">1.2</span>)  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">round</span>(<span class="number">1.9</span>)  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure>

<p>需求：任意两个数字，按照指定要求整理数字后再进行求和计算。</p>
<ul>
<li>方法1</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_num</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(a) + <span class="built_in">abs</span>(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = add_num(-<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure>

<ul>
<li>方法2</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_num</span>(<span class="params">a, b, f</span>):</span><br><span class="line">    <span class="keyword">return</span> f(a) + f(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = sum_num(-<span class="number">1</span>, <span class="number">2</span>, <span class="built_in">abs</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：两种方法对比之后，发现，方法2的代码会更加简洁，函数灵活性更高。</p>
</blockquote>
<p>函数式编程大量使用函数，减少了代码的重复，因此程序比较短，开发速度较快。</p>
<h2 id="3-2-内置高阶函数"><a href="#3-2-内置高阶函数" class="headerlink" title="3.2 内置高阶函数"></a>3.2 内置高阶函数</h2><h3 id="3-2-1-map"><a href="#3-2-1-map" class="headerlink" title="3.2.1 map()"></a>3.2.1 map()</h3><p>map(func, lst)，将传入的函数变量func作用到lst变量的每个元素中，并将结果组成新的列表(Python2)&#x2F;迭代器(Python3)返回。</p>
<p>需求：计算<code>list1</code>序列中各个数字的2次方。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">result = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x**<span class="number">2</span>,list1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># &lt;map object at 0x0000013769653198&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))  <span class="comment"># [1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure>



<h3 id="3-2-2-reduce"><a href="#3-2-2-reduce" class="headerlink" title="3.2.2 reduce()"></a>3.2.2 reduce()</h3><p>reduce(func，lst)，其中func必须有两个参数。每次func计算的结果继续和序列的下一个元素做累积计算。</p>
<blockquote>
<p>注意：reduce()传入的参数func必须接收2个参数。</p>
</blockquote>
<p>需求：计算<code>list1</code>序列中各个数字的累加和。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">result = functools.reduce(<span class="keyword">lambda</span> a, b: a+b,list1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 15</span></span><br></pre></td></tr></table></figure>



<h3 id="3-2-3-filter"><a href="#3-2-3-filter" class="headerlink" title="3.2.3 filter()"></a>3.2.3 filter()</h3><p>filter(func, lst)函数用于<strong>过滤</strong>序列, 过滤掉不符合条件的元素, 返回一个 filter 对象。如果要转换为列表, 可以使用 list() 来转换。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>, list1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># &lt;filter object at 0x0000017AF9DC3198&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))  <span class="comment"># [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure>



<h1 id="四-总结"><a href="#四-总结" class="headerlink" title="四. 总结"></a>四. 总结</h1><ul>
<li><p>递归</p>
<ul>
<li>函数内部自己调用自己</li>
<li>必须有出口</li>
</ul>
</li>
<li><p>lambda</p>
<ul>
<li>语法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> 参数列表: 表达式</span><br></pre></td></tr></table></figure>

<ul>
<li><p>lambda的参数形式</p>
<ul>
<li>无参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span>: 表达式</span><br></pre></td></tr></table></figure>

<ul>
<li>一个参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> 参数: 表达式</span><br></pre></td></tr></table></figure>

<ul>
<li>默认参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> key=value: 表达式</span><br></pre></td></tr></table></figure>

<ul>
<li>不定长位置参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> *args: 表达式</span><br></pre></td></tr></table></figure>

<ul>
<li>不定长关键字参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> **kwargs: 表达式</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>高阶函数</p>
<ul>
<li>作用：把函数作为参数传入，化简代码</li>
<li>内置高阶函数<ul>
<li>map()</li>
<li>reduce()</li>
<li>filter()</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 变量</title>
    <url>/2022/07/15/python-%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h1 id="一-变量的作用"><a href="#一-变量的作用" class="headerlink" title="一.  变量的作用"></a>一.  变量的作用</h1><p>程序中，数据都是临时存储在内存中，为了更快速的查找或使用这个数据，通常我们把这个数据在内存中存储之后定义一个名称，这个名称就是变量。</p>
<img src="/2022/07/15/python-%E5%8F%98%E9%87%8F/image-20190122123202213.png" class title="This is an test image">



<blockquote>
<p>变量就是一个存储数据的的时候当前数据所在的内存地址的名字而已。</p>
</blockquote>
<h1 id="二-定义变量"><a href="#二-定义变量" class="headerlink" title="二.  定义变量"></a>二.  定义变量</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">变量名 = 值</span><br></pre></td></tr></table></figure>

<blockquote>
<p>变量名自定义，要满足标识符命名规则。</p>
</blockquote>
<h2 id="2-1-标识符"><a href="#2-1-标识符" class="headerlink" title="2.1  标识符"></a>2.1  标识符</h2><p>标识符命名规则是Python中定义各种名字的时候的统一规范，具体如下：</p>
<ul>
<li>由数字、字母、下划线组成</li>
<li>不能数字开头</li>
<li>不能使用内置关键字</li>
<li>严格区分大小写</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">False     None    True   and      as       assert   break     class  </span><br><span class="line">continue  def     del    elif     else     except   finally   for</span><br><span class="line">from      global  if     import   in       is       lambda    nonlocal</span><br><span class="line">not       or      pass   raise    return   try      while     with  </span><br><span class="line">yield</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="2-2-命名习惯"><a href="#2-2-命名习惯" class="headerlink" title="2.2 命名习惯"></a>2.2 命名习惯</h2><ul>
<li>见名知义。</li>
<li>大驼峰：即每个单词首字母都大写，例如：<code>MyName</code>。</li>
<li>小驼峰：第二个（含）以后的单词首字母大写，例如：<code>myName</code>。</li>
<li>下划线：例如：<code>my_name</code>。</li>
</ul>
<h2 id="2-3-使用变量"><a href="#2-3-使用变量" class="headerlink" title="2.3 使用变量"></a>2.3 使用变量</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_name = <span class="string">&#x27;Adams&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(my_name)</span><br><span class="line"></span><br><span class="line">schoolName = <span class="string">&#x27;NJIT&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(schoolName)</span><br></pre></td></tr></table></figure>

<h2 id="2-4-认识bug"><a href="#2-4-认识bug" class="headerlink" title="2.4 认识bug"></a>2.4 认识bug</h2><p>所谓bug，就是程序中的错误。如果程序有错误，需要程序员排查问题，纠正错误。</p>
<img src="/2022/07/15/python-%E5%8F%98%E9%87%8F/03.png" class title="This is an test image">

<h1 id="三-Debug工具"><a href="#三-Debug工具" class="headerlink" title="三. Debug工具"></a>三. Debug工具</h1><p>Debug工具是PyCharm IDE中集成的用来调试程序的工具，在这里程序员可以查看程序的执行细节和流程或者调解bug。</p>
<p>Debug工具使用步骤：</p>
<ol>
<li>打断点</li>
<li>Debug调试</li>
</ol>
<h2 id="3-1-打断点"><a href="#3-1-打断点" class="headerlink" title="3.1 打断点"></a>3.1 打断点</h2><ul>
<li>断点位置</li>
</ul>
<p>目标要调试的代码块的第一行代码即可，即一个断点即可。</p>
<ul>
<li>打断点的方法</li>
</ul>
<p>单击目标代码的行号右侧空白位置。</p>
<img src="/2022/07/15/python-%E5%8F%98%E9%87%8F/2.png" class title="This is an test image">

<h2 id="3-2-Debug调试"><a href="#3-2-Debug调试" class="headerlink" title="3.2 Debug调试"></a>3.2 Debug调试</h2><p>打成功断点后，在文件内部任意位置 — 右键 – Debug’文件名’ — 即可调出Debug工具面板 – 单击Step Over&#x2F;F8，即可按步执行代码。</p>
<img src="/2022/07/15/python-%E5%8F%98%E9%87%8F/1.png" class title="This is an test image">

<h3 id="3-2-1-Debug输出面板分类"><a href="#3-2-1-Debug输出面板分类" class="headerlink" title="3.2.1 Debug输出面板分类"></a>3.2.1 Debug输出面板分类</h3><ul>
<li>Debugger<ul>
<li>显示变量和变量的细节</li>
</ul>
</li>
<li>Console<ul>
<li>输出内容</li>
</ul>
</li>
</ul>
<h1 id="四-认识数据类型"><a href="#四-认识数据类型" class="headerlink" title="四. 认识数据类型"></a>四. 认识数据类型</h1><p><strong>在 Python 里为了应对不同的业务需求，也把数据分为不同的类型。</strong></p>
<img src="/2022/07/15/python-%E5%8F%98%E9%87%8F/image-20190111124628584-7181988.png" class title="This is an test image">

<blockquote>
<p>检测数据类型的方法：<code>type()</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))  <span class="comment"># &lt;class &#x27;int&#x27;&gt; -- 整型</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">1.1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))  <span class="comment"># &lt;class &#x27;float&#x27;&gt; -- 浮点型</span></span><br><span class="line"></span><br><span class="line">c = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(c))  <span class="comment"># &lt;class &#x27;bool&#x27;&gt; -- 布尔型</span></span><br><span class="line"></span><br><span class="line">d = <span class="string">&#x27;12345&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(d))  <span class="comment"># &lt;class &#x27;str&#x27;&gt; -- 字符串</span></span><br><span class="line"></span><br><span class="line">e = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(e))  <span class="comment"># &lt;class &#x27;list&#x27;&gt; -- 列表</span></span><br><span class="line"></span><br><span class="line">f = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f))  <span class="comment"># &lt;class &#x27;tuple&#x27;&gt; -- 元组</span></span><br><span class="line"></span><br><span class="line">h = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(h))  <span class="comment"># &lt;class &#x27;set&#x27;&gt; -- 集合</span></span><br><span class="line"></span><br><span class="line">g = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;TOM&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(g))  <span class="comment"># &lt;class &#x27;dict&#x27;&gt; -- 字典</span></span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>定义变量的语法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">变量名 = 值</span><br></pre></td></tr></table></figure>

<ul>
<li>标识符<ul>
<li>由数字、字母、下划线组成</li>
<li>不能数字开头</li>
<li>不能使用内置关键字</li>
<li>严格区分大小写</li>
</ul>
</li>
<li>数据类型<ul>
<li>整型：int</li>
<li>浮点型：float</li>
<li>字符串：str</li>
<li>布尔型：bool</li>
<li>元组：tuple</li>
<li>集合：set</li>
<li>字典：dict</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 循环</title>
    <url>/2022/07/31/python-%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h1 id="一-循环简介"><a href="#一-循环简介" class="headerlink" title="一. 循环简介"></a>一. 循环简介</h1><h2 id="1-1-循环的作用"><a href="#1-1-循环的作用" class="headerlink" title="1.1 循环的作用"></a>1.1 循环的作用</h2><p>循环的作用：让代码更高效的重复执行。</p>
<h2 id="1-2-循环的分类"><a href="#1-2-循环的分类" class="headerlink" title="1.2 循环的分类"></a>1.2 循环的分类</h2><p>在Python中，循环分为<code>while</code>和<code>for</code>两种，最终实现效果相同。</p>
<span id="more"></span>
<h1 id="二-while循环"><a href="#二-while循环" class="headerlink" title="二. while循环"></a>二. while循环</h1><h2 id="2-1while语法"><a href="#2-1while语法" class="headerlink" title="2.1while语法"></a>2.1while语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    条件成立重复执行的代码<span class="number">1</span></span><br><span class="line">    条件成立重复执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>



<h2 id="2-2-while循环嵌套"><a href="#2-2-while循环嵌套" class="headerlink" title="2.2 while循环嵌套"></a>2.2 while循环嵌套</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件<span class="number">1</span>:</span><br><span class="line">    条件<span class="number">1</span>成立执行的代码</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">while</span> 条件<span class="number">2</span>:</span><br><span class="line">        条件<span class="number">2</span>成立执行的代码</span><br><span class="line">        ......</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：所谓while循环嵌套，就是一个while里面嵌套一个while的写法，每个while和之前的基础语法是相同的。</p>
</blockquote>
<h3 id="2-2-1-应用一：打印星号-三角形"><a href="#2-2-1-应用一：打印星号-三角形" class="headerlink" title="2.2.1 应用一：打印星号(三角形)"></a>2.2.1 应用一：打印星号(三角形)</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure>

<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>分析：每行输出星星的个数和行号是相等的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重复打印5行星星</span></span><br><span class="line"><span class="comment"># j表示行号</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> j &lt;= <span class="number">4</span>:</span><br><span class="line">    <span class="comment"># 一行星星的打印</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="comment"># i表示每行里面星星的个数，这个数字要和行号相等所以i要和j联动</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= j:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    j += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<img src="/2022/07/31/python-%E5%BE%AA%E7%8E%AF/03.png" class title="This is an test image">



<h3 id="2-2-2-九九乘法表"><a href="#2-2-2-九九乘法表" class="headerlink" title="2.2.2 九九乘法表"></a>2.2.2 九九乘法表</h3><h4 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h4><img src="/2022/07/31/python-%E5%BE%AA%E7%8E%AF/01.png" class title="This is an test image">



<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重复打印9行表达式</span></span><br><span class="line">j = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> j &lt;= <span class="number">9</span>:</span><br><span class="line">    <span class="comment"># 打印一行里面的表达式 a * b = a*b</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= j:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>*<span class="subst">&#123;j&#125;</span>=<span class="subst">&#123;j*i&#125;</span>&#x27;</span>, end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    j += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<img src="/2022/07/31/python-%E5%BE%AA%E7%8E%AF/02.png" class title="This is an test image">



<h1 id="三、for循环"><a href="#三、for循环" class="headerlink" title="三、for循环"></a>三、for循环</h1><h2 id="3-1-语法"><a href="#3-1-语法" class="headerlink" title="3.1 语法"></a>3.1 语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 序列:</span><br><span class="line">    重复执行的代码<span class="number">1</span></span><br><span class="line">    重复执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>

<h2 id="3-2-示例"><a href="#3-2-示例" class="headerlink" title="3.2 示例"></a>3.2 示例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<img src="/2022/07/31/python-%E5%BE%AA%E7%8E%AF/04.png" class title="This is an test image">



<h1 id="四、break和continue"><a href="#四、break和continue" class="headerlink" title="四、break和continue"></a>四、break和continue</h1><p>break和continue是循环中满足一定条件退出循环的两种不同方式。</p>
<ul>
<li><p>break控制循环流程，终止此循环。</p>
</li>
<li><p>continue控制循环流程，退出当前一次循环继而执行下一次循环代码。</p>
</li>
</ul>
<h2 id="4-1-break-吃5个苹果"><a href="#4-1-break-吃5个苹果" class="headerlink" title="4.1 break (吃5个苹果)"></a>4.1 break (吃5个苹果)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;吃饱了不吃了&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;吃了第<span class="subst">&#123;i&#125;</span>个苹果&#x27;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<img src="/2022/07/31/python-%E5%BE%AA%E7%8E%AF/05.png" class title="This is an test image">

<h2 id="4-2-continue-吃5个苹果"><a href="#4-2-continue-吃5个苹果" class="headerlink" title="4.2 continue (吃5个苹果)"></a>4.2 continue (吃5个苹果)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;烂了，第<span class="subst">&#123;i&#125;</span>个不吃了&#x27;</span>)</span><br><span class="line">        <span class="comment"># 在continue之前一定要修改计数器，否则会陷入死循环</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;吃了第<span class="subst">&#123;i&#125;</span>个苹果&#x27;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<img src="/2022/07/31/python-%E5%BE%AA%E7%8E%AF/06.png" class title="This is an test image">



<h1 id="五-else"><a href="#五-else" class="headerlink" title="五. else"></a>五. else</h1><p>循环可以和else配合使用，else下方缩进的代码指的是当循环正常结束之后要执行的代码。</p>
<h2 id="5-1-while…else"><a href="#5-1-while…else" class="headerlink" title="5.1 while…else"></a>5.1 while…else</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    条件成立重复执行的代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    循环正常结束之后要执行的代码</span><br></pre></td></tr></table></figure>



<h2 id="5-2-for…else"><a href="#5-2-for…else" class="headerlink" title="5.2 for…else"></a>5.2 for…else</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 序列:</span><br><span class="line">    重复执行的代码</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    循环正常结束之后要执行的代码</span><br></pre></td></tr></table></figure>

<blockquote>
<p>所谓else指的是循环正常结束之后要执行的代码，即如果是break终止循环的情况，else下方缩进的代码将不执行。</p>
</blockquote>
<h2 id="5-3-退出循环的方式"><a href="#5-3-退出循环的方式" class="headerlink" title="5.3 退出循环的方式"></a>5.3 退出循环的方式</h2><p>​	else指的是循环正常结束之后要执行的代码，</p>
<ul>
<li><p>break终止循环的情况，else下方缩进的代码将不执行。</p>
</li>
<li><p>continue控制下是可以正常结束的，当循环结束后，则执行了else缩进的代码。</p>
</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>循环的作用：控制代码重复执行</li>
<li>while语法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    条件成立重复执行的代码<span class="number">1</span></span><br><span class="line">    条件成立重复执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>

<ul>
<li>while循环嵌套语法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件<span class="number">1</span>:</span><br><span class="line">    条件<span class="number">1</span>成立执行的代码</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">while</span> 条件<span class="number">2</span>:</span><br><span class="line">        条件<span class="number">2</span>成立执行的代码</span><br><span class="line">        ......</span><br></pre></td></tr></table></figure>

<ul>
<li>for循环语法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 序列:</span><br><span class="line">    重复执行的代码<span class="number">1</span></span><br><span class="line">    重复执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>

<ul>
<li>break退出整个循环</li>
<li>continue退出本次循环，继续执行下一次重复执行的代码</li>
<li>else<ul>
<li>while和for都可以配合else使用</li>
<li>else下方缩进的代码含义：当循环正常结束后执行的代码</li>
<li>break终止循环不会执行else下方缩进的代码</li>
<li>continue退出循环的方式执行else下方缩进的代码</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 学生管理系统</title>
    <url>/2022/10/09/python-%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="一-需求分析"><a href="#一-需求分析" class="headerlink" title="一. 需求分析"></a>一. 需求分析</h1><p>简易的学生管理系统包括5个基础功能</p>
<ul>
<li>添加学员</li>
<li>删除学员</li>
<li>修改学员</li>
<li>查询学员</li>
<li>显示所有学员学员<span id="more"></span></li>
</ul>
<h1 id="二-代码"><a href="#二-代码" class="headerlink" title="二.代码"></a>二.代码</h1><p>废话不多说，先上完整代码！</p>
<p>（此系统默认用户名不可重复）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#系统主页</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info_print</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请选择功能------------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1、添加学员&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2、删除学员&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;3、修改学员&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;4、查询学员&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;5、显示所有学员学员&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;6、退出系统&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>*<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#等待存储所有学员信息</span></span><br><span class="line">info = []</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加学员信息函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_info</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;添加学员&#x27;&#x27;&#x27;</span></span><br><span class="line">    new_id = <span class="built_in">input</span>(<span class="string">&quot;请输入您的学号：&quot;</span>)</span><br><span class="line">    new_name = <span class="built_in">input</span>(<span class="string">&quot;请输入您的姓名：&quot;</span>)</span><br><span class="line">    new_tel = <span class="built_in">input</span>(<span class="string">&quot;请输入您的手机号：&quot;</span>)</span><br><span class="line">    <span class="keyword">global</span> info</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> info:</span><br><span class="line">        <span class="keyword">if</span> new_name == i[<span class="string">&quot;name&quot;</span>]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;此用户名已被占用&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="comment">#学员信息的字典</span></span><br><span class="line">    dict_info = &#123;&#125;</span><br><span class="line">    <span class="comment">#新增字典数据</span></span><br><span class="line">    dict_info[<span class="string">&quot;id&quot;</span>] = new_id</span><br><span class="line">    dict_info[<span class="string">&quot;name&quot;</span>] = new_name</span><br><span class="line">    dict_info[<span class="string">&quot;tel&quot;</span>] = new_tel</span><br><span class="line">    <span class="comment">#print(dict_info)</span></span><br><span class="line">    info.append(dict_info)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除学员信息函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">del_info</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;删除学员&#x27;&#x27;&#x27;</span></span><br><span class="line">    del_name = <span class="built_in">input</span>(<span class="string">&quot;请输入想要删除的学员姓名：&quot;</span>)</span><br><span class="line">    <span class="keyword">global</span> info</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> info:</span><br><span class="line">        <span class="keyword">if</span> del_name == i[<span class="string">&quot;name&quot;</span>]:</span><br><span class="line">            info.remove(i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;此用户名不存在。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改学员信息函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">modify_info</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;修改学员&#x27;&#x27;&#x27;</span></span><br><span class="line">    modify_name = <span class="built_in">input</span>(<span class="string">&quot;请输入修改学员的姓名：&quot;</span>)</span><br><span class="line">    <span class="keyword">global</span> info</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> info:</span><br><span class="line">        <span class="keyword">if</span> modify_name == i[<span class="string">&quot;name&quot;</span>]:</span><br><span class="line">            i[<span class="string">&quot;tel&quot;</span>] = <span class="built_in">input</span>(<span class="string">&quot;请输入新的手机号：&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;此用户名不存在。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询学员信息函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_info</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;查找学员&#x27;&#x27;&#x27;</span></span><br><span class="line">    search_name = <span class="built_in">input</span>(<span class="string">&quot;请输入查询学员的姓名：&quot;</span>)</span><br><span class="line">    <span class="keyword">global</span> info</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> info:</span><br><span class="line">        <span class="keyword">if</span> search_name == i[<span class="string">&quot;name&quot;</span>]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;查找到的学员信息如下------&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;search_name&#125;</span>的学号：<span class="subst">&#123;i[<span class="string">&#x27;id&#x27;</span>]&#125;</span>\n&quot;</span></span><br><span class="line">                  <span class="string">f&quot;<span class="subst">&#123;search_name&#125;</span>的手机号：<span class="subst">&#123;i[<span class="string">&#x27;tel&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;此用户名不存在&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示全部学员信息函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">all_info</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;显示全部学员&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;学号\t姓名\t手机号&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> info:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i[<span class="string">&#x27;id&#x27;</span>]&#125;</span>\t<span class="subst">&#123;i[<span class="string">&#x27;name&#x27;</span>]&#125;</span>\t<span class="subst">&#123;i[<span class="string">&#x27;tel&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    info_print()</span><br><span class="line">    user_name = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请选择功能序号：&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> user_name == <span class="number">1</span>:</span><br><span class="line">        <span class="comment">#print(&quot;添加\n&quot;)</span></span><br><span class="line">        add_info()</span><br><span class="line">        <span class="built_in">print</span>(info)</span><br><span class="line">    <span class="keyword">elif</span> user_name == <span class="number">2</span>:</span><br><span class="line">        del_info()</span><br><span class="line">        <span class="built_in">print</span>(info)</span><br><span class="line">    <span class="keyword">elif</span> user_name == <span class="number">3</span>:</span><br><span class="line">        modify_info()</span><br><span class="line">        <span class="built_in">print</span>(info)</span><br><span class="line">    <span class="keyword">elif</span> user_name == <span class="number">4</span>:</span><br><span class="line">        search_info()</span><br><span class="line">    <span class="keyword">elif</span> user_name == <span class="number">5</span>:</span><br><span class="line">        all_info()</span><br><span class="line">    <span class="keyword">elif</span> user_name == <span class="number">6</span>:</span><br><span class="line">        exit_flag = <span class="built_in">input</span>(<span class="string">&quot;确定退出吗？yes or no?:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> exit_flag == <span class="string">&quot;yes&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;抱歉，您的输入有误\n&quot;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="三-界面设计"><a href="#三-界面设计" class="headerlink" title="三. 界面设计"></a>三. 界面设计</h1><p>主页包含5个基础功能 + 退出系统， 一共六个模块</p>
<blockquote>
<p>注意：便于多次调用，所以主页用函数封装。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">info_print</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请选择功能------------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1、添加学员&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2、删除学员&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;3、修改学员&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;4、查询学员&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;5、显示所有学员学员&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;6、退出系统&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>*<span class="number">20</span>)</span><br></pre></td></tr></table></figure>

<img src="/2022/10/09/python-%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/01.png" class title="This is an test image">

<h1 id="四-整体框架"><a href="#四-整体框架" class="headerlink" title="四. 整体框架"></a>四. 整体框架</h1><p>用户输入功能序号，调用相应的模块来完成操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment">#显示主页</span></span><br><span class="line">    info_print()</span><br><span class="line">    <span class="comment">#接受功能序号</span></span><br><span class="line">    user_name = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请选择功能序号：&quot;</span>))</span><br><span class="line">    <span class="comment">#添加</span></span><br><span class="line">    <span class="keyword">if</span> user_name == <span class="number">1</span>:</span><br><span class="line">        add_info()</span><br><span class="line">        <span class="built_in">print</span>(info)</span><br><span class="line">    <span class="comment">#删除</span></span><br><span class="line">    <span class="keyword">elif</span> user_name == <span class="number">2</span>:</span><br><span class="line">        del_info()</span><br><span class="line">        <span class="built_in">print</span>(info)</span><br><span class="line">    <span class="comment">#修改</span></span><br><span class="line">    <span class="keyword">elif</span> user_name == <span class="number">3</span>:</span><br><span class="line">        modify_info()</span><br><span class="line">        <span class="built_in">print</span>(info)</span><br><span class="line">    <span class="comment">#查询</span></span><br><span class="line">    <span class="keyword">elif</span> user_name == <span class="number">4</span>:</span><br><span class="line">        search_info()</span><br><span class="line">    <span class="comment">#显示全部</span></span><br><span class="line">    <span class="keyword">elif</span> user_name == <span class="number">5</span>:</span><br><span class="line">        all_info()</span><br><span class="line">    <span class="comment">#退出系统</span></span><br><span class="line">    <span class="keyword">elif</span> user_name == <span class="number">6</span>:</span><br><span class="line">        exit_flag = <span class="built_in">input</span>(<span class="string">&quot;确定退出吗？yes or no?:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> exit_flag == <span class="string">&quot;yes&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment">#错误输入</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;抱歉，您的输入有误\n&quot;</span>)</span><br></pre></td></tr></table></figure>

<ol>
<li>因为在每次操作后，都要回到主页进行下一步操作，所以使用<code>while True:</code></li>
<li>通过if函数来调用调用不同的版块</li>
<li>为了提高代码可读性，所以将每个功能模块封装成函数</li>
<li>优化代码，加入错误输入 and 退出系统确定功能，更加人性化</li>
</ol>
<h1 id="五-函数"><a href="#五-函数" class="headerlink" title="五. 函数"></a>五. 函数</h1><p>每个学员信息存储在字典中，所有学员信息存储在列表中。</p>
<p>此系统默认用户名不可重复</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#等待存储所有学员信息</span></span><br><span class="line">info = []</span><br></pre></td></tr></table></figure>
<h2 id="5-1-添加"><a href="#5-1-添加" class="headerlink" title="5.1 添加"></a>5.1 添加</h2><ol>
<li>存储输入数据</li>
<li>检测用户名是否被占用</li>
<li>没占用–创建新字典<code>dict_info</code>，存储输入的数据，并将新字典加入学员信息列表<code>info</code></li>
<li>已占用–提示信息，返回主页</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加学员信息函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_info</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;添加学员&#x27;&#x27;&#x27;</span></span><br><span class="line">    new_id = <span class="built_in">input</span>(<span class="string">&quot;请输入您的学号：&quot;</span>)</span><br><span class="line">    new_name = <span class="built_in">input</span>(<span class="string">&quot;请输入您的姓名：&quot;</span>)</span><br><span class="line">    new_tel = <span class="built_in">input</span>(<span class="string">&quot;请输入您的手机号：&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 涉及到修改全局变量info，用global声名</span></span><br><span class="line">    <span class="keyword">global</span> info</span><br><span class="line">	<span class="comment">#遍历列表中的元素</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> info:</span><br><span class="line">        <span class="keyword">if</span> new_name == i[<span class="string">&quot;name&quot;</span>]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;此用户名已被占用&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="comment">#学员信息的字典</span></span><br><span class="line">    dict_info = &#123;&#125;</span><br><span class="line">    <span class="comment">#新增字典数据</span></span><br><span class="line">    dict_info[<span class="string">&quot;id&quot;</span>] = new_id</span><br><span class="line">    dict_info[<span class="string">&quot;name&quot;</span>] = new_name</span><br><span class="line">    dict_info[<span class="string">&quot;tel&quot;</span>] = new_tel</span><br><span class="line">    <span class="comment">#print(dict_info)</span></span><br><span class="line">    info.append(dict_info)</span><br></pre></td></tr></table></figure>

<img src="/2022/10/09/python-%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/02.png" class title="This is an test image">

<h2 id="5-2-删除"><a href="#5-2-删除" class="headerlink" title="5.2 删除"></a>5.2 删除</h2><ol>
<li>接收删除学员姓名</li>
<li>检测姓名是否存在</li>
<li>存在–删除数据，返回主页</li>
<li>不存在，提示信息</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除学员信息函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">del_info</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;删除学员&#x27;&#x27;&#x27;</span></span><br><span class="line">    del_name = <span class="built_in">input</span>(<span class="string">&quot;请输入想要删除的学员姓名：&quot;</span>)</span><br><span class="line">    <span class="comment"># 涉及到修改全局变量info，用global声名</span></span><br><span class="line">    <span class="keyword">global</span> info</span><br><span class="line">    <span class="comment">#遍历列表中的元素</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> info:</span><br><span class="line">        <span class="keyword">if</span> del_name == i[<span class="string">&quot;name&quot;</span>]:</span><br><span class="line">            info.remove(i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;此用户名不存在。&quot;</span>)</span><br></pre></td></tr></table></figure>
<img src="/2022/10/09/python-%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/03.png" class title="This is an test image">

<h2 id="5-3-修改"><a href="#5-3-修改" class="headerlink" title="5.3 修改"></a>5.3 修改</h2><ol>
<li>接收修改学员姓名</li>
<li>检测姓名是否存在</li>
<li>存在–修改该字典对应key的value，返回主页</li>
<li>不存在，提示信息</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改学员信息函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">modify_info</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;修改学员&#x27;&#x27;&#x27;</span></span><br><span class="line">    modify_name = <span class="built_in">input</span>(<span class="string">&quot;请输入修改学员的姓名：&quot;</span>)</span><br><span class="line">    <span class="keyword">global</span> info</span><br><span class="line">    <span class="comment">#遍历列表中的元素</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> info:</span><br><span class="line">        <span class="keyword">if</span> modify_name == i[<span class="string">&quot;name&quot;</span>]:</span><br><span class="line">            i[<span class="string">&quot;tel&quot;</span>] = <span class="built_in">input</span>(<span class="string">&quot;请输入新的手机号：&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;此用户名不存在。&quot;</span>)</span><br></pre></td></tr></table></figure>
<img src="/2022/10/09/python-%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/04.png" class title="This is an test image">

<h2 id="5-4-查询"><a href="#5-4-查询" class="headerlink" title="5.4 查询"></a>5.4 查询</h2><ol>
<li>接收查询学员姓名</li>
<li>检测姓名是否存在</li>
<li>存在–显示该字典对应key的value，返回主页</li>
<li>不存在，提示信息</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询学员信息函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_info</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;查找学员&#x27;&#x27;&#x27;</span></span><br><span class="line">    search_name = <span class="built_in">input</span>(<span class="string">&quot;请输入查询学员的姓名：&quot;</span>)</span><br><span class="line">    <span class="keyword">global</span> info</span><br><span class="line">    <span class="comment">#遍历列表中的元素</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> info:</span><br><span class="line">        <span class="keyword">if</span> search_name == i[<span class="string">&quot;name&quot;</span>]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;查找到的学员信息如下------&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;search_name&#125;</span>的学号：<span class="subst">&#123;i[<span class="string">&#x27;id&#x27;</span>]&#125;</span>\n&quot;</span></span><br><span class="line">                  <span class="string">f&quot;<span class="subst">&#123;search_name&#125;</span>的手机号：<span class="subst">&#123;i[<span class="string">&#x27;tel&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;此用户名不存在&quot;</span>)</span><br></pre></td></tr></table></figure>
<img src="/2022/10/09/python-%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/05.png" class title="This is an test image">

<h2 id="5-5-显示全部"><a href="#5-5-显示全部" class="headerlink" title="5.5 显示全部"></a>5.5 显示全部</h2><p>通过遍历循环，输出学员信息列表中所有元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示全部学员信息函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">all_info</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;显示全部学员&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;学号\t姓名\t手机号&quot;</span>)</span><br><span class="line">    <span class="comment">#遍历列表中的元素</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> info:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i[<span class="string">&#x27;id&#x27;</span>]&#125;</span>\t<span class="subst">&#123;i[<span class="string">&#x27;name&#x27;</span>]&#125;</span>\t<span class="subst">&#123;i[<span class="string">&#x27;tel&#x27;</span>]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<img src="/2022/10/09/python-%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/06.png" class title="This is an test image">

<h1 id="六-退出系统"><a href="#六-退出系统" class="headerlink" title="六. 退出系统"></a>六. 退出系统</h1><blockquote>
<p>退出系统核心为break，break是退出距离最近的循环，封装在函数里容易产生错误</p>
<p>直接写，代码更加简化</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line">   <span class="keyword">elif</span> user_name == <span class="number">6</span>:</span><br><span class="line">       exit_flag = <span class="built_in">input</span>(<span class="string">&quot;确定退出吗？yes or no?:&quot;</span>)</span><br><span class="line">       <span class="keyword">if</span> exit_flag == <span class="string">&quot;yes&quot;</span>:</span><br><span class="line">           <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<img src="/2022/10/09/python-%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/07.png" class title="This is an test image">
]]></content>
      <categories>
        <category>Python小项目</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 推导式</title>
    <url>/2022/08/15/python-%E6%8E%A8%E5%AF%BC%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="一-列表推导式"><a href="#一-列表推导式" class="headerlink" title="一. 列表推导式"></a>一. 列表推导式</h1><p>作用：用一个表达式创建一个有规律的列表或控制一个有规律列表。</p>
<p>列表推导式又叫列表生成式。</p>
<span id="more"></span>
<h2 id="1-1-演示"><a href="#1-1-演示" class="headerlink" title="1.1 演示"></a>1.1 演示</h2><ul>
<li>列表推导式</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure>

<h2 id="1-2-带if的列表推导式"><a href="#1-2-带if的列表推导式" class="headerlink" title="1.2 带if的列表推导式"></a>1.2 带if的列表推导式</h2><p>例1：创建0-10的偶数列表</p>
<ul>
<li>range()步长实现</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>)]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure>

<h2 id="1-3-多个for循环实现列表推导式"><a href="#1-3-多个for循环实现列表推导式" class="headerlink" title="1.3 多个for循环实现列表推导式"></a>1.3 多个for循环实现列表推导式</h2><p>需求：创建列表如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">[(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]</span><br></pre></td></tr></table></figure>

<ul>
<li>代码如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [(i, j) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure>



<h1 id="二-字典推导式"><a href="#二-字典推导式" class="headerlink" title="二. 字典推导式"></a>二. 字典推导式</h1><p>通过字典推导式合并为一个字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>]</span><br><span class="line">list2 = [<span class="string">&#x27;Tom&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;man&#x27;</span>]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>字典推导式作用：快速合并列表为字典或提取字典中目标数据。</p>
</blockquote>
<h2 id="2-1-演示"><a href="#2-1-演示" class="headerlink" title="2.1 演示"></a>2.1 演示</h2><ol>
<li>创建一个字典：字典key是1-5数字，value是这个数字的2次方。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;i: i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1)  <span class="comment"># &#123;1: 1, 2: 4, 3: 9, 4: 16&#125;</span></span><br></pre></td></tr></table></figure>



<ol start="2">
<li>将两个列表合并为一个字典</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>]</span><br><span class="line">list2 = [<span class="string">&#x27;Tom&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;man&#x27;</span>]</span><br><span class="line"></span><br><span class="line">dict1 = &#123;list1[i]: list2[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list1))&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>提取字典中目标数据</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">counts = &#123;<span class="string">&#x27;MBP&#x27;</span>: <span class="number">268</span>, <span class="string">&#x27;HP&#x27;</span>: <span class="number">125</span>, <span class="string">&#x27;DELL&#x27;</span>: <span class="number">201</span>, <span class="string">&#x27;Lenovo&#x27;</span>: <span class="number">199</span>, <span class="string">&#x27;acer&#x27;</span>: <span class="number">99</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需求：提取上述电脑数量大于等于200的字典数据</span></span><br><span class="line">count1 = &#123;key: value <span class="keyword">for</span> key, value <span class="keyword">in</span> counts.items() <span class="keyword">if</span> value &gt;= <span class="number">200</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(count1)  <span class="comment"># &#123;&#x27;MBP&#x27;: 268, &#x27;DELL&#x27;: 201&#125;</span></span><br></pre></td></tr></table></figure>



<h1 id="三-集合推导式"><a href="#三-集合推导式" class="headerlink" title="三. 集合推导式"></a>三. 集合推导式</h1><p>需求：创建一个集合，数据为下方列表的2次方。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">set1 = &#123;i ** <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> li43·st1&#125;</span><br><span class="line"><span class="built_in">print</span>(set1)  <span class="comment"># &#123;1, 4&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：集合有数据去重功能。</p>
</blockquote>
<h1 id="四-总结"><a href="#四-总结" class="headerlink" title="四. 总结"></a>四. 总结</h1><ul>
<li>推导式的作用：简化代码</li>
<li>推导式写法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表推导式</span></span><br><span class="line">[xx <span class="keyword">for</span> xx <span class="keyword">in</span> <span class="built_in">range</span>()]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典推导式</span></span><br><span class="line">&#123;xx1: xx2 <span class="keyword">for</span> ... <span class="keyword">in</span> ...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合推导式</span></span><br><span class="line">&#123;xx <span class="keyword">for</span> xx <span class="keyword">in</span> ...&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 数据序列-元组</title>
    <url>/2022/08/07/python-%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E5%85%83%E7%BB%84/</url>
    <content><![CDATA[<h1 id="一-元组"><a href="#一-元组" class="headerlink" title="一. 元组"></a>一. 元组</h1><p>一个元组可以存储多个数据，元组内的数据是不能修改的。</p>
<p>元组特点：定义元组使用小括号，且逗号隔开各个数据，数据可以是不同的数据类型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多个数据元组</span></span><br><span class="line">t1 = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单个数据元组</span></span><br><span class="line">t2 = (<span class="number">10</span>,)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：如果定义的元组只有一个数据，那么这个数据后面也好添加逗号，否则数据类型为唯一的这个数据的数据类型！！！！</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2 = (<span class="number">10</span>,)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t2))  <span class="comment"># tuple</span></span><br><span class="line"></span><br><span class="line">t3 = (<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t3))  <span class="comment"># int</span></span><br><span class="line"></span><br><span class="line">t4 = (<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t4))  <span class="comment"># str</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>


<h1 id="二-元组的常见操作"><a href="#二-元组的常见操作" class="headerlink" title="二. 元组的常见操作"></a>二. 元组的常见操作</h1><p>元组数据不支持修改，只支持查找</p>
<ul>
<li>按下标查找数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple1[<span class="number">0</span>])  <span class="comment"># aa</span></span><br></pre></td></tr></table></figure>



<ul>
<li>index()：查找某个数据，如果数据存在返回对应的下标，否则报错，语法和列表、字符串的index方法相同。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple1.index(<span class="string">&#x27;aa&#x27;</span>))  <span class="comment"># 0</span></span><br></pre></td></tr></table></figure>



<ul>
<li>count()：统计某个数据在当前元组出现的次数。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple1.count(<span class="string">&#x27;bb&#x27;</span>))  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure>



<ul>
<li>len()：统计元组中数据的个数。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(tuple1))  <span class="comment"># 4</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：元组内的直接数据如果修改则立即报错！！！！！</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line">tuple1[<span class="number">0</span>] = <span class="string">&#x27;aaa&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>但是如果元组里面有列表</p>
<p>修改列表里面的数据则是支持的！！！！</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple2 = (<span class="number">10</span>, <span class="number">20</span>, [<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>], <span class="number">50</span>, <span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple2[<span class="number">2</span>])  <span class="comment"># 访问到列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：(10, 20, [&#x27;aaaaa&#x27;, &#x27;bb&#x27;, &#x27;cc&#x27;], 50, 30)</span></span><br><span class="line">tuple2[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">&#x27;aaaaa&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(tuple2)</span><br></pre></td></tr></table></figure>



<h1 id="三-总结"><a href="#三-总结" class="headerlink" title="三. 总结"></a>三. 总结</h1><ul>
<li>定义元组</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1 = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">t2 = (<span class="number">10</span>,)</span><br></pre></td></tr></table></figure>

<ul>
<li>常用操作方法<ul>
<li>index()</li>
<li>count()</li>
<li>len()</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 数据序列-列表</title>
    <url>/2022/08/05/python-%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="一-列表的格式"><a href="#一-列表的格式" class="headerlink" title="一. 列表的格式"></a>一. 列表的格式</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[数据<span class="number">1</span>, 数据<span class="number">2</span>, 数据<span class="number">3</span>, 数据<span class="number">4.</span>.....]</span><br></pre></td></tr></table></figure>

<p>列表可以一次性存储多个数据，且可以为不同数据类型。</p>
<h1 id="二-列表的常用操作"><a href="#二-列表的常用操作" class="headerlink" title="二. 列表的常用操作"></a>二. 列表的常用操作</h1><p>列表的作用是一次性存储多个数据，程序员可以对这些数据进行的操作有：增、删、改、查。</p>
<span id="more"></span>
<h2 id="2-1-查找"><a href="#2-1-查找" class="headerlink" title="2.1 查找"></a>2.1 查找</h2><h3 id="2-1-1-下标"><a href="#2-1-1-下标" class="headerlink" title="2.1.1 下标"></a>2.1.1 下标</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">0</span>])  <span class="comment"># Tom</span></span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">1</span>])  <span class="comment"># Lily</span></span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">2</span>])  <span class="comment"># Rose</span></span><br></pre></td></tr></table></figure>

<h3 id="2-1-2-函数"><a href="#2-1-2-函数" class="headerlink" title="2.1.2 函数"></a>2.1.2 函数</h3><ul>
<li>index()：返回指定数据所在位置的下标 。</li>
</ul>
<h4 id="1-语法"><a href="#1-语法" class="headerlink" title="1. 语法"></a>1. 语法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表序列.index(数据, 开始位置下标, 结束位置下标)</span><br></pre></td></tr></table></figure>

<h4 id="2-演示"><a href="#2-演示" class="headerlink" title="2. 演示"></a>2. 演示</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name_list.index(<span class="string">&#x27;Lily&#x27;</span>, <span class="number">0</span>, <span class="number">2</span>))  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：如果查找的数据不存在则报错。</p>
</blockquote>
<ul>
<li>count()：统计指定数据在当前列表中出现的次数。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name_list.count(<span class="string">&#x27;Lily&#x27;</span>))  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>len()：访问列表长度，即列表中数据的个数。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(name_list))  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure>



<h3 id="2-1-3-判断存在"><a href="#2-1-3-判断存在" class="headerlink" title="2.1.3 判断存在"></a>2.1.3 判断存在</h3><ul>
<li>in：判断指定数据在某个列表序列，如果在返回True，否则返回False</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Lily&#x27;</span> <span class="keyword">in</span> name_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Lilys&#x27;</span> <span class="keyword">in</span> name_list)</span><br></pre></td></tr></table></figure>



<ul>
<li>not in：判断指定数据不在某个列表序列，如果不在返回True，否则返回False</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Lily&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> name_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Lilys&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> name_list)</span><br></pre></td></tr></table></figure>

<h2 id="2-2-增加"><a href="#2-2-增加" class="headerlink" title="2.2 增加"></a>2.2 增加</h2><p>作用：增加指定数据到列表中。</p>
<ul>
<li>append()：列表结尾追加数据。</li>
</ul>
<ol>
<li>语法</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表序列.append(数据)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>演示</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_list.append(<span class="string">&#x27;xiaoming&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;, &#x27;xiaoming&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>列表追加数据的时候，直接在原列表里面追加了指定数据，即修改了原列表，故列表为可变类型数据。</p>
</blockquote>
<ol start="3">
<li>注意点</li>
</ol>
<p>如果append()追加的数据是一个序列，则追加整个序列到列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_list.append([<span class="string">&#x27;xiaoming&#x27;</span>, <span class="string">&#x27;xiaohong&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;, [&#x27;xiaoming&#x27;, &#x27;xiaohong&#x27;]]</span></span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure>



<ul>
<li>extend()：列表结尾追加数据，如果数据是一个序列，则将这个序列的数据逐一添加到列表。</li>
</ul>
<ol>
<li>语法</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表序列.extend(数据)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>演示</p>
<p>2.1 单个数据</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_list.extend(<span class="string">&#x27;xiaoming&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;, &#x27;x&#x27;, &#x27;i&#x27;, &#x27;a&#x27;, &#x27;o&#x27;, &#x27;m&#x27;, &#x27;i&#x27;, &#x27;n&#x27;, &#x27;g&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure>

<p>​	2.2 序列数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_list.extend([<span class="string">&#x27;xiaoming&#x27;</span>, <span class="string">&#x27;xiaohong&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;, &#x27;xiaoming&#x27;, &#x27;xiaohong&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure>



<ul>
<li>insert()：指定位置新增数据。</li>
</ul>
<ol>
<li>语法</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表序列.insert(位置下标, 数据)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>演示</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_list.insert(<span class="number">1</span>, <span class="string">&#x27;xiaoming&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[&#x27;Tom&#x27;, &#x27;xiaoming&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure>



<h2 id="2-3-删除"><a href="#2-3-删除" class="headerlink" title="2.3 删除"></a>2.3 删除</h2><ul>
<li>del</li>
</ul>
<ol>
<li>语法</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> 目标</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>演示</p>
<p>2.1 删除列表</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：报错提示：name &#x27;name_list&#x27; is not defined</span></span><br><span class="line"><span class="keyword">del</span> name_list</span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure>

<p>​	2.2 删除指定数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> name_list[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[&#x27;Lily&#x27;, &#x27;Rose&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure>



<ul>
<li>pop()：删除指定下标的数据(默认为最后一个)，并返回该数据。</li>
</ul>
<ol>
<li>语法</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表序列.pop(下标)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>演示</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">del_name = name_list.pop(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：Lily</span></span><br><span class="line"><span class="built_in">print</span>(del_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[&#x27;Tom&#x27;, &#x27;Rose&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure>



<ul>
<li>remove()：移除列表中某个数据的第一个匹配项。</li>
</ul>
<ol>
<li>语法</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表序列.remove(数据)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>演示</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_list.remove(<span class="string">&#x27;Rose&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure>



<ul>
<li>clear()：清空列表</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_list.clear()</span><br><span class="line"><span class="built_in">print</span>(name_list) <span class="comment"># 结果： []</span></span><br></pre></td></tr></table></figure>



<h2 id="2-4-修改"><a href="#2-4-修改" class="headerlink" title="2.4 修改"></a>2.4 修改</h2><ul>
<li>修改指定下标数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_list[<span class="number">0</span>] = <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[&#x27;aaa&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure>



<ul>
<li>逆置：reverse()</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num_list = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">num_list.reverse()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[8, 6, 3, 2, 5, 1]</span></span><br><span class="line"><span class="built_in">print</span>(num_list)</span><br></pre></td></tr></table></figure>



<ul>
<li>排序：sort()</li>
</ul>
<ol>
<li>语法</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表序列.sort( key=<span class="literal">None</span>, reverse=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：reverse表示排序规则，<strong>reverse &#x3D; True</strong> 降序， <strong>reverse &#x3D; False</strong> 升序（默认）</p>
</blockquote>
<ol start="2">
<li>演示</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num_list = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">num_list.sort()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[1, 2, 3, 5, 6, 8]</span></span><br><span class="line"><span class="built_in">print</span>(num_list)</span><br></pre></td></tr></table></figure>



<h2 id="2-5-复制"><a href="#2-5-复制" class="headerlink" title="2.5 复制"></a>2.5 复制</h2><p>函数：copy()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_li2 = name_list.copy()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(name_li2)</span><br></pre></td></tr></table></figure>



<h1 id="三-列表的循环遍历"><a href="#三-列表的循环遍历" class="headerlink" title="三. 列表的循环遍历"></a>三. 列表的循环遍历</h1><p>需求：依次打印列表中的各个数据。</p>
<h2 id="3-1-while"><a href="#3-1-while" class="headerlink" title="3.1 while"></a>3.1 while</h2><ul>
<li>代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(name_list):</span><br><span class="line">    <span class="built_in">print</span>(name_list[i])</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>执行结果</li>
</ul>
<img src="/2022/08/05/python-%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E5%88%97%E8%A1%A8/01.png" class title="This is an test image">



<h2 id="3-2-for"><a href="#3-2-for" class="headerlink" title="3.2 for"></a>3.2 for</h2><ul>
<li>代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> name_list:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<ul>
<li>执行结果</li>
</ul>
<img src="/2022/08/05/python-%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E5%88%97%E8%A1%A8/02.png" class title="This is an test image">

<h1 id="四-列表嵌套"><a href="#四-列表嵌套" class="headerlink" title="四. 列表嵌套"></a>四. 列表嵌套</h1><p>所谓列表嵌套指的就是一个列表里面包含了其他的子列表。</p>
<p>应用场景：要存储班级一、二、三三个班级学生姓名，且每个班级的学生姓名在一个列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [[<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;小绿&#x27;</span>], [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>], [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>]]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如何查找到数据”李四”？</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一步：按下标查找到李四所在的列表</span></span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步：从李四所在的列表里面，再按下标找到数据李四</span></span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">2</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure>



<h1 id="五-总结"><a href="#五-总结" class="headerlink" title="五. 总结"></a>五. 总结</h1><ul>
<li>列表的格式</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[数据<span class="number">1</span>, 数据<span class="number">2</span>, 数据<span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>常用操作方法<ul>
<li>index()</li>
<li>len()</li>
<li>append()</li>
<li>pop()</li>
<li>remove()</li>
</ul>
</li>
<li>列表嵌套</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [[<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;小绿&#x27;</span>], [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>], [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>]]</span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">2</span>][<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 结果：李四</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 数据序列-字典</title>
    <url>/2022/08/09/python-%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E5%AD%97%E5%85%B8/</url>
    <content><![CDATA[<h1 id="一-创建字典的语法"><a href="#一-创建字典的语法" class="headerlink" title="一. 创建字典的语法"></a>一. 创建字典的语法</h1><p>字典特点：</p>
<ul>
<li>符号为大括号</li>
<li>数据为键值对形式出现</li>
<li>各个键值对之间用逗号隔开</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 有数据字典</span></span><br><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 空字典</span></span><br><span class="line">dict2 = &#123;&#125;</span><br><span class="line"></span><br><span class="line">dict3 = <span class="built_in">dict</span>()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：一般称冒号前面的为键(key)，简称k；冒号后面的为值(value)，简称v。</p>
</blockquote>
<span id="more"></span>
<h1 id="二-字典常见操作"><a href="#二-字典常见操作" class="headerlink" title="二. 字典常见操作"></a>二. 字典常见操作</h1><h2 id="2-1-增-x2F-改"><a href="#2-1-增-x2F-改" class="headerlink" title="2.1 增&#x2F;改"></a>2.1 增&#x2F;改</h2><p>写法：字典序列[key] &#x3D; 值</p>
<blockquote>
<p>注意：如果key存在则修改这个key对应的值；如果key不存在则新增此键值对。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增</span></span><br><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line">dict1[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;Rose&#x27;</span></span><br><span class="line"><span class="comment"># 结果：&#123;&#x27;name&#x27;: &#x27;Rose&#x27;, &#x27;age&#x27;: 20, &#x27;gender&#x27;: &#x27;男&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#改</span></span><br><span class="line">dict1[<span class="string">&#x27;id&#x27;</span>] = <span class="number">110</span></span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;Rose&#x27;, &#x27;age&#x27;: 20, &#x27;gender&#x27;: &#x27;男&#x27;, &#x27;id&#x27;: 110&#125;</span></span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：字典为可变类型。</p>
</blockquote>
<h2 id="2-2-删"><a href="#2-2-删" class="headerlink" title="2.2 删"></a>2.2 删</h2><ul>
<li>del() &#x2F; del：删除字典或删除字典中指定键值对。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> dict1[<span class="string">&#x27;gender&#x27;</span>]</span><br><span class="line"><span class="comment"># 结果：&#123;&#x27;name&#x27;: &#x27;Tom&#x27;, &#x27;age&#x27;: 20&#125;</span></span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br></pre></td></tr></table></figure>



<ul>
<li>clear()：清空字典</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">dict1.clear()</span><br><span class="line"><span class="built_in">print</span>(dict1)  <span class="comment"># &#123;&#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="2-3-查"><a href="#2-3-查" class="headerlink" title="2.3 查"></a>2.3 查</h2><h3 id="2-3-1-key值查找"><a href="#2-3-1-key值查找" class="headerlink" title="2.3.1 key值查找"></a>2.3.1 key值查找</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1[<span class="string">&#x27;name&#x27;</span>])  <span class="comment"># Tom</span></span><br><span class="line"><span class="built_in">print</span>(dict1[<span class="string">&#x27;id&#x27;</span>])  <span class="comment"># 报错</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果当前查找的key存在，则返回对应的值；否则则报错。</p>
</blockquote>
<h3 id="2-3-2-get-–-查value"><a href="#2-3-2-get-–-查value" class="headerlink" title="2.3.2 get() – 查value"></a>2.3.2 get() – 查value</h3><ul>
<li>语法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字典序列.get(key, 默认值)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：如果当前查找的key不存在则返回第二个参数(默认值)，如果省略第二个参数，则返回None。</p>
</blockquote>
<ul>
<li>快速体验</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1.get(<span class="string">&#x27;name&#x27;</span>))  <span class="comment"># Tom</span></span><br><span class="line"><span class="built_in">print</span>(dict1.get(<span class="string">&#x27;id&#x27;</span>, <span class="number">110</span>))  <span class="comment"># 110</span></span><br><span class="line"><span class="built_in">print</span>(dict1.get(<span class="string">&#x27;id&#x27;</span>))  <span class="comment"># None</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-3-keys-–-查找全部key"><a href="#2-3-3-keys-–-查找全部key" class="headerlink" title="2.3.3 keys() – 查找全部key"></a>2.3.3 keys() – 查找全部key</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1.keys())  <span class="comment"># dict_keys([&#x27;name&#x27;, &#x27;age&#x27;, &#x27;gender&#x27;])</span></span><br></pre></td></tr></table></figure>



<h3 id="2-3-4-values-–-查找全部value"><a href="#2-3-4-values-–-查找全部value" class="headerlink" title="2.3.4 values() – 查找全部value"></a>2.3.4 values() – 查找全部value</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1.values())  <span class="comment"># dict_values([&#x27;Tom&#x27;, 20, &#x27;男&#x27;])</span></span><br></pre></td></tr></table></figure>



<h3 id="2-3-5-items-–-以元组的形式输出"><a href="#2-3-5-items-–-以元组的形式输出" class="headerlink" title="2.3.5 items() – 以元组的形式输出"></a>2.3.5 items() – 以元组的形式输出</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1.items())  <span class="comment"># dict_items([(&#x27;name&#x27;, &#x27;Tom&#x27;), (&#x27;age&#x27;, 20), (&#x27;gender&#x27;, &#x27;男&#x27;)])</span></span><br></pre></td></tr></table></figure>



<h1 id="三-字典的循环遍历"><a href="#三-字典的循环遍历" class="headerlink" title="三. 字典的循环遍历"></a>三. 字典的循环遍历</h1><h2 id="3-1-遍历字典的key"><a href="#3-1-遍历字典的key" class="headerlink" title="3.1 遍历字典的key"></a>3.1 遍历字典的key</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dict1.keys():</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br></pre></td></tr></table></figure>

<img src="/2022/08/09/python-%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E5%AD%97%E5%85%B8/01.png" class title="This is an test image">



<h2 id="3-2-遍历字典的value"><a href="#3-2-遍历字典的value" class="headerlink" title="3.2 遍历字典的value"></a>3.2 遍历字典的value</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> dict1.values():</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure>

<img src="/2022/08/09/python-%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E5%AD%97%E5%85%B8/02.png" class title="This is an test image">



<h2 id="3-3-遍历字典的元素"><a href="#3-3-遍历字典的元素" class="headerlink" title="3.3 遍历字典的元素"></a>3.3 遍历字典的元素</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> dict1.items():</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure>

<img src="/2022/08/09/python-%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E5%AD%97%E5%85%B8/03.png" class title="This is an test image">



<h2 id="3-4-遍历字典的键值对"><a href="#3-4-遍历字典的键值对" class="headerlink" title="3.4 遍历字典的键值对"></a>3.4 遍历字典的键值对</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dict1.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;key&#125;</span> = <span class="subst">&#123;value&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<img src="/2022/08/09/python-%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E5%AD%97%E5%85%B8/04.png" class title="This is an test image">



<h1 id="四-总结"><a href="#四-总结" class="headerlink" title="四. 总结"></a>四. 总结</h1><ul>
<li>定义字典</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">30</span>&#125;</span><br><span class="line"></span><br><span class="line">dict2 = &#123;&#125;</span><br><span class="line"></span><br><span class="line">dict3 = <span class="built_in">dict</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li>常见操作<ul>
<li>增&#x2F;改</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字典序列[key] = 值</span><br></pre></td></tr></table></figure>

<ul>
<li>查找<ul>
<li>字典序列[key]</li>
<li>keys()</li>
<li>values()</li>
<li>items()</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 数据序列-字符串</title>
    <url>/2022/08/02/python-%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="一-认识字符串"><a href="#一-认识字符串" class="headerlink" title="一. 认识字符串"></a>一. 认识字符串</h1><p>字符串是 Python 中最常用的数据类型。</p>
<h2 id="1-1-字符串特征"><a href="#1-1-字符串特征" class="headerlink" title="1.1 字符串特征"></a>1.1 字符串特征</h2><ul>
<li>一对引号字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name1 = <span class="string">&#x27;Adams&#x27;</span></span><br><span class="line">name2 = <span class="string">&quot;Rose&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>三引号字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;&#x27;&#x27; I am Adams, </span></span><br><span class="line"><span class="string">        nice to meet you! &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<blockquote>
<p>注意：三引号形式的字符串支持换行。</p>
</blockquote>
<h2 id="1-2-字符串输出"><a href="#1-2-字符串输出" class="headerlink" title="1.2 字符串输出"></a>1.2 字符串输出</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">name = <span class="string">&#x27;Adams&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我的名字是%s&#x27;</span> % name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;我的名字是<span class="subst">&#123;name&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="1-3-字符串输入"><a href="#1-3-字符串输入" class="headerlink" title="1.3 字符串输入"></a>1.3 字符串输入</h2><p>在Python中，使用<code>input()</code>接收用户输入。</p>
<ul>
<li>演示</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的名字：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;您输入的名字是<span class="subst">&#123;name&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：一开始输入的都是字符串格式</p>
</blockquote>
<h1 id="二、下标"><a href="#二、下标" class="headerlink" title="二、下标"></a>二、下标</h1><p><code>“下标”</code>又叫<code>“索引”</code>，就是编号。下标的作用即是通过下标快速找到对应的数据。</p>
<img src="/2022/08/02/python-%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E5%AD%97%E7%AC%A6%E4%B8%B2/1.png" class title="This is an test image">

<h2 id="2-1-演示"><a href="#2-1-演示" class="headerlink" title="2.1 演示"></a>2.1 演示</h2><p>字符串<code>name = &quot;abcdef&quot;</code>，取到不同下标对应的数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;abcdef&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<ul>
<li>输出结果</li>
</ul>
<img src="/2022/08/02/python-%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E5%AD%97%E7%AC%A6%E4%B8%B2/2.png" class title="This is an test image">

<blockquote>
<p>注意：下标从0开始。</p>
</blockquote>
<h1 id="三、切片"><a href="#三、切片" class="headerlink" title="三、切片"></a>三、切片</h1><p>切片是指对操作的对象截取其中一部分的操作。<strong>字符串、列表、元组</strong>都支持切片操作。</p>
<h2 id="3-1-语法"><a href="#3-1-语法" class="headerlink" title="3.1 语法"></a>3.1 语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">序列[开始位置下标:结束位置下标:步长]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意</p>
</blockquote>
<pre><code> 1. 不包含结束位置下标对应的数据， 正负整数均可；
 2. 步长是选取间隔，正负整数均可，默认步长为1。
</code></pre>
<h2 id="3-2-演示"><a href="#3-2-演示" class="headerlink" title="3.2 演示"></a>3.2 演示</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;abcdefg&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">2</span>:<span class="number">5</span>:<span class="number">1</span>])  <span class="comment"># cde</span></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">2</span>:<span class="number">5</span>])  <span class="comment"># cde</span></span><br><span class="line"><span class="built_in">print</span>(name[:<span class="number">5</span>])  <span class="comment"># abcde</span></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">1</span>:])  <span class="comment"># bcdefg</span></span><br><span class="line"><span class="built_in">print</span>(name[:])  <span class="comment"># abcdefg</span></span><br><span class="line"><span class="built_in">print</span>(name[::<span class="number">2</span>])  <span class="comment"># aceg</span></span><br><span class="line"><span class="built_in">print</span>(name[:-<span class="number">1</span>])  <span class="comment"># abcdef, 负1表示倒数第一个数据</span></span><br><span class="line"><span class="built_in">print</span>(name[-<span class="number">4</span>:-<span class="number">1</span>])  <span class="comment"># def</span></span><br><span class="line"><span class="built_in">print</span>(name[::-<span class="number">1</span>])  <span class="comment"># gfedcba</span></span><br></pre></td></tr></table></figure>

<h2 id="3-3-易错点"><a href="#3-3-易错点" class="headerlink" title="3.3 易错点"></a>3.3 易错点</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="built_in">print</span>(aList)</span><br><span class="line"><span class="comment"># 1. 替换</span></span><br><span class="line">aList[:<span class="number">4</span>] = [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(aList)</span><br></pre></td></tr></table></figure>
<p>执行结果：<img src="/2022/08/02/python-%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E5%AD%97%E7%AC%A6%E4%B8%B2/3.png" class title="This is an test image"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="built_in">print</span>(aList)</span><br><span class="line"><span class="comment"># 2. 插入（增加）</span></span><br><span class="line">aList[<span class="number">3</span>:<span class="number">3</span>] = [<span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(aList)</span><br></pre></td></tr></table></figure>
<p>执行结果：<img src="/2022/08/02/python-%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E5%AD%97%E7%AC%A6%E4%B8%B2/4.png" class title="This is an test image"></p>
<blockquote>
<p>注意：第二个替换可以理解为 aList[3:3] 是一个空列表，选中的是原来下标为3的数字前的空隙，将新的数据插入空列表中。</p>
<p>所以得到的列表也比之前多了一个数据。</p>
</blockquote>
<h1 id="四、常用操作方法"><a href="#四、常用操作方法" class="headerlink" title="四、常用操作方法"></a>四、常用操作方法</h1><p>字符串的常用操作方法有查找、修改和判断三大类。</p>
<h2 id="4-1-查找"><a href="#4-1-查找" class="headerlink" title="4.1 查找"></a>4.1 查找</h2><p>所谓字符串查找方法即是查找子串在字符串中的位置或出现的次数。</p>
<ul>
<li>find()：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则返回-1。</li>
<li>index()：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则报异常。</li>
<li>rfind()： 和find()功能相同，但查找方向为&#x3D;&#x3D;右侧&#x3D;&#x3D;开始。</li>
<li>rindex()：和index()功能相同，但查找方向为&#x3D;&#x3D;右侧&#x3D;&#x3D;开始。</li>
</ul>
<h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1. 语法"></a>1. 语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符串序列.find(子串, 开始位置下标, 结束位置下标)</span><br><span class="line">字符串序列.index(子串, 开始位置下标, 结束位置下标)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p>
</blockquote>
<h3 id="2-演示"><a href="#2-演示" class="headerlink" title="2. 演示"></a>2. 演示</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr1 = <span class="string">&quot;hello world and Readers and Adams and Python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(mystr1.find(<span class="string">&#x27;and&#x27;</span>))  <span class="comment"># 12</span></span><br><span class="line"><span class="built_in">print</span>(mystr1.find(<span class="string">&#x27;and&#x27;</span>, <span class="number">15</span>, <span class="number">30</span>))  <span class="comment"># 23</span></span><br><span class="line"><span class="built_in">print</span>(mystr1.find(<span class="string">&#x27;ands&#x27;</span>))  <span class="comment"># -1</span></span><br><span class="line"></span><br><span class="line">mystr2 = <span class="string">&quot;hello world and Readers and Adams and Python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(mystr2.index(<span class="string">&#x27;and&#x27;</span>))  <span class="comment"># 12</span></span><br><span class="line"><span class="built_in">print</span>(mystr2.index(<span class="string">&#x27;and&#x27;</span>, <span class="number">15</span>, <span class="number">30</span>))  <span class="comment"># 23</span></span><br><span class="line"><span class="built_in">print</span>(mystr2.index(<span class="string">&#x27;ands&#x27;</span>))  <span class="comment"># 报错</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p>
</blockquote>
<h2 id="4-2-计数"><a href="#4-2-计数" class="headerlink" title="4.2 计数"></a>4.2 计数</h2><ul>
<li>count()：返回某个子串在字符串中出现的次数</li>
</ul>
<h3 id="1-语法-1"><a href="#1-语法-1" class="headerlink" title="1. 语法"></a>1. 语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符串序列.count(子串, 开始位置下标, 结束位置下标)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p>
</blockquote>
<h3 id="2-演示-1"><a href="#2-演示-1" class="headerlink" title="2. 演示"></a>2. 演示</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and Readers and Adams and Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.count(<span class="string">&#x27;and&#x27;</span>))  <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(mystr.count(<span class="string">&#x27;ands&#x27;</span>))  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(mystr.count(<span class="string">&#x27;and&#x27;</span>, <span class="number">0</span>, <span class="number">20</span>))  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>



<h2 id="4-3-修改"><a href="#4-3-修改" class="headerlink" title="4.3 修改"></a>4.3 修改</h2><p>所谓修改字符串，指的就是通过函数的形式修改字符串中的数据。</p>
<ul>
<li>replace()：替换</li>
</ul>
<h3 id="1-语法-2"><a href="#1-语法-2" class="headerlink" title="1. 语法"></a>1. 语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符串序列.replace(旧子串, 新子串, 替换次数)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：替换次数如果查出子串出现次数，则替换次数为该子串出现次数。</p>
</blockquote>
<h3 id="2-演示-2"><a href="#2-演示-2" class="headerlink" title="2. 演示"></a>2. 演示</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and Readers and Adams and Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.replace(<span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;he&#x27;</span>))</span><br><span class="line"><span class="comment"># 结果：hello world he Readers he Adams he Python</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.replace(<span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;he&#x27;</span>, <span class="number">10</span>))</span><br><span class="line"><span class="comment"># 结果：hello world he Readers he Adams he Python</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr)</span><br><span class="line"><span class="comment"># 结果：hello world and Readers and Adams and Python</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：数据按照是否能直接修改分为&#x3D;&#x3D;可变类型&#x3D;&#x3D;和&#x3D;&#x3D;不可变类型&#x3D;&#x3D;两种。</p>
<p>字符串类型的数据修改的时，不能改变原有字符串，属于不能直接修改数据的类型即是不可变类型。</p>
</blockquote>
<ul>
<li>split()：按照指定字符分割字符串。</li>
</ul>
<h3 id="1-语法-3"><a href="#1-语法-3" class="headerlink" title="1. 语法"></a>1. 语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符串序列.split(分割字符, num)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：num表示的是分割字符出现的次数，即将来返回数据个数为num+1个。</p>
</blockquote>
<h3 id="2-演示-3"><a href="#2-演示-3" class="headerlink" title="2. 演示"></a>2. 演示</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and Readers and Adams and Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.split(<span class="string">&#x27;and&#x27;</span>))</span><br><span class="line"><span class="comment"># 结果：[&#x27;hello world &#x27;, &#x27; Readers &#x27;, &#x27; Adams &#x27;, &#x27; Python&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.split(<span class="string">&#x27;and&#x27;</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment"># 结果：[&#x27;hello world &#x27;, &#x27; Readers &#x27;, &#x27; Adams and Python&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.split(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line"><span class="comment"># 结果：[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;and&#x27;, &#x27;Readers&#x27;, &#x27;and&#x27;, &#x27;Adams&#x27;, &#x27;and&#x27;, &#x27;Python&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.split(<span class="string">&#x27; &#x27;</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment"># 结果：[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;and Readers and Adams and Python&#x27;]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：如果分割字符是原有字符串中的子串，分割后则丢失该子串。</p>
</blockquote>
<ul>
<li>join()：用一个字符或子串合并字符串，即是将多个字符串合并为一个新的字符串。</li>
</ul>
<h3 id="1-语法-4"><a href="#1-语法-4" class="headerlink" title="1. 语法"></a>1. 语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符或子串.join(多字符串组成的序列)</span><br></pre></td></tr></table></figure>

<h3 id="2-演示-4"><a href="#2-演示-4" class="headerlink" title="2. 演示"></a>2. 演示</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;how&#x27;</span>, <span class="string">&#x27;are&#x27;</span>, <span class="string">&#x27;you&#x27;</span>]</span><br><span class="line">t1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;ddd&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;_&#x27;</span>.join(list1))</span><br><span class="line"><span class="comment"># 结果：hello_how_are_you</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;...&#x27;</span>.join(t1))</span><br><span class="line"><span class="comment"># 结果：aa...b...cc...ddd</span></span><br></pre></td></tr></table></figure>



<ul>
<li>capitalize()：将字符串第一个字符转换成大写。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and Readers and Adams and Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.capitalize())</span><br><span class="line"><span class="comment"># 结果：Hello world and readers and adams and python</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：capitalize()函数转换后，只字符串第一个字符大写，其他的字符全都小写。</p>
</blockquote>
<ul>
<li>title()：将字符串每个单词首字母转换成大写。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and Readers and Adams and Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.title())</span><br><span class="line"><span class="comment"># 结果：Hello World And Readers And Adams And Python</span></span><br></pre></td></tr></table></figure>



<ul>
<li>lower()：将字符串中大写转小写。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and Readers and Adams and Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.lower())</span><br><span class="line"><span class="comment"># 结果：hello world and readers and adams and python</span></span><br></pre></td></tr></table></figure>



<ul>
<li>upper()：将字符串中小写转大写。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and Readers and Adams and Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.upper())</span><br><span class="line"><span class="comment"># 结果：HELLO WORLD AND READERS AND ADAMS AND PYTHON</span></span><br></pre></td></tr></table></figure>



<ul>
<li><p>lstrip()：删除字符串左侧空白字符。</p>
</li>
<li><p>rstrip()：删除字符串右侧空白字符。</p>
</li>
<li><p>strip()：删除字符串两侧空白字符。</p>
</li>
<li><p>ljust()：返回一个原字符串左对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串。</p>
</li>
</ul>
<h3 id="1-语法-5"><a href="#1-语法-5" class="headerlink" title="1. 语法"></a>1. 语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符串序列.ljust(长度, 填充字符)</span><br></pre></td></tr></table></figure>

<h3 id="2-输出效果"><a href="#2-输出效果" class="headerlink" title="2. 输出效果"></a>2. 输出效果</h3><ul>
<li><p>rjust()：返回一个原字符串右对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串，语法和ljust()相同。</p>
</li>
<li><p>center()：返回一个原字符串居中对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串，语法和ljust()相同。</p>
</li>
</ul>
<h2 id="4-3-判断"><a href="#4-3-判断" class="headerlink" title="4.3 判断"></a>4.3 判断</h2><p>所谓判断即是判断真假，返回的结果是布尔型数据类型：True 或 False。</p>
<ul>
<li>startswith()：检查字符串是否是以指定子串开头，是则返回 True，否则返回 False。如果设置开始和结束位置下标，则在指定范围内检查。</li>
</ul>
<h3 id="1-语法-6"><a href="#1-语法-6" class="headerlink" title="1. 语法"></a>1. 语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符串序列.startswith(子串, 开始位置下标, 结束位置下标)</span><br></pre></td></tr></table></figure>

<h3 id="2-演示-5"><a href="#2-演示-5" class="headerlink" title="2. 演示"></a>2. 演示</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and Readers and Adams and Python   &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.startswith(<span class="string">&#x27;hello&#x27;</span>))</span><br><span class="line"><span class="comment"># 结果：True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.startswith(<span class="string">&#x27;hello&#x27;</span>, <span class="number">5</span>, <span class="number">20</span>))</span><br><span class="line"><span class="comment"># 结果False</span></span><br></pre></td></tr></table></figure>



<ul>
<li>endswith()：：检查字符串是否是以指定子串结尾，是则返回 True，否则返回 False。如果设置开始和结束位置下标，则在指定范围内检查。</li>
</ul>
<h3 id="1-语法-7"><a href="#1-语法-7" class="headerlink" title="1. 语法"></a>1. 语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符串序列.endswith(子串, 开始位置下标, 结束位置下标)</span><br></pre></td></tr></table></figure>

<h3 id="2-演示-6"><a href="#2-演示-6" class="headerlink" title="2. 演示"></a>2. 演示</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and Readers and Adams and Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.endswith(<span class="string">&#x27;Python&#x27;</span>))</span><br><span class="line"><span class="comment"># 结果：True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.endswith(<span class="string">&#x27;python&#x27;</span>))</span><br><span class="line"><span class="comment"># 结果：False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.endswith(<span class="string">&#x27;Python&#x27;</span>, <span class="number">2</span>, <span class="number">20</span>))</span><br><span class="line"><span class="comment"># 结果：False</span></span><br></pre></td></tr></table></figure>



<ul>
<li>isalpha()：如果字符串至少有一个字符并且所有字符都是字母则返回 True, 否则返回 False。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">mystr2 = <span class="string">&#x27;hello12345&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr1.isalpha())</span><br><span class="line"><span class="comment"># 结果：True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr2.isalpha())</span><br><span class="line"><span class="comment"># 结果：False</span></span><br></pre></td></tr></table></figure>



<ul>
<li>isdigit()：如果字符串只包含数字则返回 True 否则返回 False。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr1 = <span class="string">&#x27;aaa12345&#x27;</span></span><br><span class="line">mystr2 = <span class="string">&#x27;12345&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr1.isdigit())</span><br><span class="line"><span class="comment"># 结果： False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr2.isdigit())</span><br><span class="line"><span class="comment"># 结果：False</span></span><br></pre></td></tr></table></figure>



<ul>
<li>isalnum()：如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True,否则返回 False。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr1 = <span class="string">&#x27;aaa12345&#x27;</span></span><br><span class="line">mystr2 = <span class="string">&#x27;12345-&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr1.isalnum())</span><br><span class="line"><span class="comment"># 结果：True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr2.isalnum())</span><br><span class="line"><span class="comment"># 结果：False</span></span><br></pre></td></tr></table></figure>



<ul>
<li>isspace()：如果字符串中只包含空白，则返回 True，否则返回 False。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr1 = <span class="string">&#x27;1 2 3 4 5&#x27;</span></span><br><span class="line">mystr2 = <span class="string">&#x27;     &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr1.isspace())</span><br><span class="line"><span class="comment"># 结果：False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr2.isspace())</span><br><span class="line"><span class="comment"># 结果：True</span></span><br></pre></td></tr></table></figure>



<h1 id="五-总结"><a href="#五-总结" class="headerlink" title="五. 总结"></a>五. 总结</h1><ul>
<li>下标<ul>
<li>计算机为数据序列中每个元素分配的从0开始的编号</li>
</ul>
</li>
<li>切片</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">序列名[开始位置下标:结束位置下标:步长]</span><br></pre></td></tr></table></figure>

<ul>
<li>常用操作方法<ul>
<li>find()</li>
<li>index()</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 数据序列-集合</title>
    <url>/2022/08/11/python-%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h1 id="一-创建集合"><a href="#一-创建集合" class="headerlink" title="一. 创建集合"></a>一. 创建集合</h1><p>创建集合使用<code>&#123;&#125;</code>或<code>set()</code>， 但是如果要创建空集合只能使用<code>set()</code>，因为<code>&#123;&#125;</code>用来创建空字典。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"></span><br><span class="line">s4 = <span class="built_in">set</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s4))  <span class="comment"># set</span></span><br><span class="line"></span><br><span class="line">s5 = &#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s5))  <span class="comment"># dict</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>特点：</p>
<ol>
<li>集合可以去掉重复数据；</li>
<li>集合数据是无序的，故不支持下标</li>
</ol>
</blockquote>
<span id="more"></span>
<h1 id="二-集合常见操作方法"><a href="#二-集合常见操作方法" class="headerlink" title="二. 集合常见操作方法"></a>二. 集合常见操作方法</h1><h2 id="2-1-增加数据"><a href="#2-1-增加数据" class="headerlink" title="2.1 增加数据"></a>2.1 增加数据</h2><ul>
<li>add()</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;</span><br><span class="line">s1.add(<span class="number">100</span>)</span><br><span class="line">s1.add(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)  <span class="comment"># &#123;100, 10, 20&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>因为集合有去重功能，所以，当向集合内追加的数据是当前集合已有数据的话，则不进行任何操作。</p>
</blockquote>
<ul>
<li>update() – 追加的数据是序列。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;</span><br><span class="line"><span class="comment"># s1.update(100)  # 报错</span></span><br><span class="line">s1.update([<span class="number">100</span>, <span class="number">200</span>])</span><br><span class="line">s1.update(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br></pre></td></tr></table></figure>

<p>执行结果：<img src="/2022/08/11/python-%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97-%E9%9B%86%E5%90%88/01.png" class title="This is an test image"></p>
<h2 id="2-2-删除数据"><a href="#2-2-删除数据" class="headerlink" title="2.2 删除数据"></a>2.2 删除数据</h2><ul>
<li>remove()，删除集合中的指定数据，如果数据不存在则报错。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line">s1.remove(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"></span><br><span class="line">s1.remove(<span class="number">10</span>)  <span class="comment"># 报错（原因：已经删除）</span></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br></pre></td></tr></table></figure>



<ul>
<li>discard()，删除集合中的指定数据，如果数据不存在也不会报错。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line">s1.discard(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"></span><br><span class="line">s1.discard(<span class="number">10</span>) <span class="comment"># 再删一次，测试是否报错</span></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br></pre></td></tr></table></figure>



<ul>
<li>pop()，随机删除集合中的某个数据，并返回这个数据。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line"></span><br><span class="line">del_num = s1.pop()</span><br><span class="line"><span class="built_in">print</span>(del_num)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br></pre></td></tr></table></figure>



<h2 id="2-3-查找数据"><a href="#2-3-查找数据" class="headerlink" title="2.3 查找数据"></a>2.3 查找数据</h2><ul>
<li>in：判断数据在集合序列</li>
<li>not in：判断数据不在集合序列</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">in</span> s1)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">not</span> <span class="keyword">in</span> s1)</span><br></pre></td></tr></table></figure>



<h1 id="三-总结"><a href="#三-总结" class="headerlink" title="三. 总结"></a>三. 总结</h1><ul>
<li><p>创建集合</p>
<ul>
<li>有数据集合</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;数据<span class="number">1</span>, 数据<span class="number">2</span>, ...&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>无数据集合</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="built_in">set</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>常见操作</p>
<ul>
<li>增加数据<ul>
<li>add()</li>
<li>update()</li>
</ul>
</li>
<li>删除数据<ul>
<li>remove()</li>
<li>discard()</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 文件操作</title>
    <url>/2022/08/24/python-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><ul>
<li>文件操作的作用</li>
<li>文件的基本操作<ul>
<li>打开</li>
<li>读写</li>
<li>关闭</li>
</ul>
</li>
<li>文件备份</li>
<li>文件和文件夹的操作<span id="more"></span></li>
</ul>
<h1 id="一-文件的基本操作"><a href="#一-文件的基本操作" class="headerlink" title="一. 文件的基本操作"></a>一. 文件的基本操作</h1><h2 id="1-1-文件操作步骤"><a href="#1-1-文件操作步骤" class="headerlink" title="1.1 文件操作步骤"></a>1.1 文件操作步骤</h2><ol>
<li>打开文件</li>
<li>读写等操作</li>
<li>关闭文件</li>
</ol>
<blockquote>
<p>注意：可以只打开和关闭文件，不进行任何读写操作。</p>
</blockquote>
<h3 id="1-1-1-打开"><a href="#1-1-1-打开" class="headerlink" title="1.1.1  打开"></a>1.1.1  打开</h3><p>在python，使用open函数，可以打开一个已经存在的文件，或者创建一个新文件，语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">open</span>(name, mode)</span><br></pre></td></tr></table></figure>

<p>name：是要打开的目标文件名的字符串(可以包含文件所在的具体路径)。</p>
<p>mode：设置打开文件的模式(访问模式)：只读、写入、追加等。</p>
<h4 id="1-1-1-1-打开文件模式"><a href="#1-1-1-1-打开文件模式" class="headerlink" title="1.1.1.1 打开文件模式"></a>1.1.1.1 打开文件模式</h4><table>
<thead>
<tr>
<th align="center">模式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">r</td>
<td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td align="center">rb</td>
<td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td align="center">r+</td>
<td>打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td align="center">rb+</td>
<td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td align="center">w</td>
<td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td align="center">wb</td>
<td>以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td align="center">w+</td>
<td>打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td align="center">wb+</td>
<td>以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td align="center">a</td>
<td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td align="center">ab</td>
<td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td align="center">a+</td>
<td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td>
</tr>
<tr>
<td align="center">ab+</td>
<td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td>
</tr>
</tbody></table>
<h4 id="1-1-1-2-代码演示"><a href="#1-1-1-2-代码演示" class="headerlink" title="1.1.1.2 代码演示"></a>1.1.1.2 代码演示</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：此时的<code>f</code>是<code>open</code>函数的文件对象。</p>
</blockquote>
<h3 id="1-1-2-文件对象方法"><a href="#1-1-2-文件对象方法" class="headerlink" title="1.1.2 文件对象方法"></a>1.1.2 文件对象方法</h3><h5 id="1-1-1-1-写"><a href="#1-1-1-1-写" class="headerlink" title="1.1.1.1 写"></a>1.1.1.1 写</h5><ul>
<li>语法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">对象对象.write(<span class="string">&#x27;内容&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>体验</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 打开文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.文件写入</span></span><br><span class="line">f.write(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 关闭文件</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<ol>
<li><code>w	</code>和<code>a</code>模式：如果文件不存在则创建该文件；如果文件存在，<code>w</code>模式先清空再写入，<code>a</code>模式直接末尾追加。</li>
<li><code>r</code>模式：如果文件不存在则报错。</li>
</ol>
</blockquote>
<h5 id="1-1-2-2-读"><a href="#1-1-2-2-读" class="headerlink" title="1.1.2.2 读"></a>1.1.2.2 读</h5><ul>
<li>read()</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">文件对象.read(num)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>num表示要从文件中读取的数据的长度（单位是字节），如果没有传入num，那么就表示读取文件中所有的数据。</p>
</blockquote>
<ul>
<li>readlines()</li>
</ul>
<p>readlines可以按照行的方式把整个文件中的内容进行一次性读取，并且返回的是一个列表，其中每一行的数据为一个元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">content = f.readlines()</span><br><span class="line"></span><br><span class="line"><span class="comment"># [&#x27;hello world\n&#x27;, &#x27;abcdefg\n&#x27;, &#x27;aaa\n&#x27;, &#x27;bbb\n&#x27;, &#x27;ccc&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>



<ul>
<li>readline()</li>
</ul>
<p>readline()一次读取一行内容。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">content = f.readline()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;第一行：<span class="subst">&#123;content&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">content = f.readline()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;第二行：<span class="subst">&#123;content&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<img src="/2022/08/24/python-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/01.png" class title="This is an test image">



<h5 id="1-1-2-3-seek"><a href="#1-1-2-3-seek" class="headerlink" title="1.1.2.3 seek()"></a>1.1.2.3 seek()</h5><p>作用：用来移动文件指针。</p>
<p>语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">文件对象.seek(偏移量, 起始位置)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>起始位置：</p>
<ul>
<li>0：文件开头</li>
<li>1：当前位置</li>
<li>2：文件结尾</li>
</ul>
</blockquote>
<p>可以通过seek,让文件以a+模式或者w+模式打开时指针从头读取文件内容</p>
<h3 id="1-1-3-关闭"><a href="#1-1-3-关闭" class="headerlink" title="1.1.3 关闭"></a>1.1.3 关闭</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">文件对象.close()</span><br></pre></td></tr></table></figure>



<h1 id="二-文件备份"><a href="#二-文件备份" class="headerlink" title="二. 文件备份"></a>二. 文件备份</h1><p>需求：用户输入当前目录下任意文件名，程序完成对该文件的备份功能(备份文件名为xx[备份]后缀，例如：test[备份].txt)。</p>
<h2 id="2-1-步骤"><a href="#2-1-步骤" class="headerlink" title="2.1 步骤"></a>2.1 步骤</h2><ol>
<li>接收用户输入的文件名</li>
<li>规划备份文件名（拆分+重组）</li>
<li>备份文件写入数据</li>
</ol>
<h2 id="2-2-代码实现"><a href="#2-2-代码实现" class="headerlink" title="2.2 代码实现"></a>2.2 代码实现</h2><ol>
<li>接收用户输入目标文件名</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">old_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入您要备份的文件名：&#x27;</span>)</span><br></pre></td></tr></table></figure>



<ol start="2">
<li><p>规划备份文件名——通多文件切片完成</p>
<p>1.1 提取目标文件后缀</p>
<p>2.2 组织备份的文件名，xx[备份]后缀</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.1 提取文件后缀点的下标</span></span><br><span class="line">index = old_name.rfind(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(index)  # 后缀中.的下标</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(old_name[:index])  # 源文件名（无后缀）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.2 组织新文件名 旧文件名 + [备份] + 后缀</span></span><br><span class="line">new_name = old_name[:index] + <span class="string">&#x27;[备份]&#x27;</span> + old_name[index:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印新文件名（带后缀）</span></span><br><span class="line"><span class="comment"># print(new_name)</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>备份文件写入数据</p>
<p>3.1 打开源文件 和 备份文件</p>
<p>3.2 将源文件数据写入备份文件</p>
<p>3.3 关闭文件</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3.1 打开文件</span></span><br><span class="line">old_f = <span class="built_in">open</span>(old_name, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">new_f = <span class="built_in">open</span>(new_name, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.2 将源文件数据写入备份文件</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    con = old_f.read(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(con) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    new_f.write(con)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.3 关闭文件</span></span><br><span class="line">old_f.close()</span><br><span class="line">new_f.close()</span><br></pre></td></tr></table></figure>



<h2 id="2-3-代码优化"><a href="#2-3-代码优化" class="headerlink" title="2.3 代码优化"></a>2.3 代码优化</h2><p>如果用户输入<code>.txt</code>，这是一个无效文件，程序如何更改才能限制只有有效的文件名才能备份？</p>
<p>答：添加条件判断即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">old_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入您要备份的文件名：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">index = old_name.rfind(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重点</span></span><br><span class="line"><span class="keyword">if</span> index &gt; <span class="number">0</span>:</span><br><span class="line">    postfix = old_name[index:]</span><br><span class="line"></span><br><span class="line">new_name = old_name[:index] + <span class="string">&#x27;[备份]&#x27;</span> + postfix</span><br><span class="line"></span><br><span class="line">old_f = <span class="built_in">open</span>(old_name, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">new_f = <span class="built_in">open</span>(new_name, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    con = old_f.read(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(con) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    new_f.write(con)</span><br><span class="line"></span><br><span class="line">old_f.close()</span><br><span class="line">new_f.close()</span><br></pre></td></tr></table></figure>



<h1 id="三-文件和文件夹的操作"><a href="#三-文件和文件夹的操作" class="headerlink" title="三. 文件和文件夹的操作"></a>三. 文件和文件夹的操作</h1><p>在Python中文件和文件夹的操作要借助os模块里面的相关功能，具体步骤如下：</p>
<ol>
<li>导入os模块</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用<code>os</code>模块相关功能</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.函数名()</span><br></pre></td></tr></table></figure>

<h2 id="3-1-文件重命名"><a href="#3-1-文件重命名" class="headerlink" title="3.1 文件重命名"></a>3.1 文件重命名</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.rename(目标文件名, 新文件名)</span><br></pre></td></tr></table></figure>



<h2 id="3-2-删除文件"><a href="#3-2-删除文件" class="headerlink" title="3.2 删除文件"></a>3.2 删除文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.remove(目标文件名)</span><br></pre></td></tr></table></figure>



<h2 id="3-3-创建文件夹"><a href="#3-3-创建文件夹" class="headerlink" title="3.3 创建文件夹"></a>3.3 创建文件夹</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.mkdir(文件夹名字)</span><br></pre></td></tr></table></figure>



<h2 id="3-4-删除文件夹"><a href="#3-4-删除文件夹" class="headerlink" title="3.4 删除文件夹"></a>3.4 删除文件夹</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.rmdir(文件夹名字)</span><br></pre></td></tr></table></figure>



<h2 id="3-5-获取当前目录"><a href="#3-5-获取当前目录" class="headerlink" title="3.5 获取当前目录"></a>3.5 获取当前目录</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.getcwd()</span><br></pre></td></tr></table></figure>



<h2 id="3-6-改变默认目录"><a href="#3-6-改变默认目录" class="headerlink" title="3.6 改变默认目录"></a>3.6 改变默认目录</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.chdir(目录)</span><br></pre></td></tr></table></figure>



<h2 id="3-7-获取目录列表"><a href="#3-7-获取目录列表" class="headerlink" title="3.7 获取目录列表"></a>3.7 获取目录列表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.listdir(目录)</span><br></pre></td></tr></table></figure>



<h1 id="四-应用案例"><a href="#四-应用案例" class="headerlink" title="四.应用案例"></a>四.应用案例</h1><p>需求：<strong>批量</strong>修改文件名，既可添加指定字符串，又能删除指定字符串。</p>
<ul>
<li>步骤</li>
</ul>
<ol>
<li>设置添加删除字符串的的标识</li>
<li>获取指定目录的所有文件</li>
<li>将原有文件名添加&#x2F;删除指定字符串，构造新名字</li>
<li>os.rename()重命名</li>
</ol>
<ul>
<li>代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置重命名标识：如果为1则添加指定字符，flag取值为2则删除指定字符</span></span><br><span class="line">flag = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定目录</span></span><br><span class="line">dir_name = <span class="string">&#x27;./&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定目录的文件列表</span></span><br><span class="line">file_list = os.listdir(dir_name)</span><br><span class="line"><span class="comment"># print(file_list)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历文件列表内的文件</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> file_list:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加指定字符</span></span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">        new_name = <span class="string">&#x27;Python-&#x27;</span> + name</span><br><span class="line">    <span class="comment"># 删除指定字符</span></span><br><span class="line">    <span class="keyword">elif</span> flag == <span class="number">2</span>:</span><br><span class="line">        num = <span class="built_in">len</span>(<span class="string">&#x27;Python-&#x27;</span>)</span><br><span class="line">        new_name = name[num:]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印新文件名，测试程序正确性</span></span><br><span class="line">    <span class="built_in">print</span>(new_name)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 重命名</span></span><br><span class="line">    os.rename(dir_name+name, dir_name+new_name)</span><br></pre></td></tr></table></figure>



<h1 id="五-总结"><a href="#五-总结" class="headerlink" title="五. 总结"></a>五. 总结</h1><ul>
<li><p>文件操作步骤</p>
<ul>
<li>打开</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">文件对象 = <span class="built_in">open</span>(目标文件, 访问模式)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>操作</p>
<ul>
<li>读</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">文件对象.read()</span><br><span class="line">文件对象.readlines()</span><br><span class="line">文件对象.readline()</span><br></pre></td></tr></table></figure>

<ul>
<li>写</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">文件对象.write()</span><br></pre></td></tr></table></figure>

<ul>
<li>seek()</li>
</ul>
</li>
<li><p>关闭</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">文件对象.close()</span><br></pre></td></tr></table></figure>

</li>
<li><p>主访问模式</p>
<ul>
<li>w：写，文件不存在则新建该文件</li>
<li>r：读，文件不存在则报错</li>
<li>a：追加</li>
</ul>
</li>
<li><p>文件和文件夹操作</p>
<ul>
<li>重命名：os.rename()</li>
<li>获取当前目录：os.getcwd()</li>
<li>获取目录列表：os.listdir()</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 注释</title>
    <url>/2022/07/10/python-%E6%B3%A8%E9%87%8A/</url>
    <content><![CDATA[<h1 id="一-注释的作用"><a href="#一-注释的作用" class="headerlink" title="一. 注释的作用"></a>一. 注释的作用</h1><ul>
<li>通过用自己熟悉的语言，在程序中对某些代码进行标注说明，这就是注释的作用，能够大大增强程序的可读性。<span id="more"></span></li>
</ul>
<h1 id="二-注释的分类及语法"><a href="#二-注释的分类及语法" class="headerlink" title="二. 注释的分类及语法"></a>二. 注释的分类及语法</h1><p>注释分为两类：单行注释 和 多行注释。</p>
<ul>
<li>单行注释</li>
</ul>
<p>只能注释一行内容，语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注释内容</span></span><br></pre></td></tr></table></figure>

<ul>
<li>多行注释</li>
</ul>
<p>可以注释多行内容，一般用在注释一段代码的情况， 语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">	第一行注释</span></span><br><span class="line"><span class="string">	第二行注释</span></span><br><span class="line"><span class="string">	第三行注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">	注释1</span></span><br><span class="line"><span class="string">	注释2</span></span><br><span class="line"><span class="string">	注释3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>快捷键： ctrl + &#x2F;</p>
</blockquote>
<h2 id="2-1-示例"><a href="#2-1-示例" class="headerlink" title="2.1 示例"></a>2.1 示例</h2><ul>
<li>单行注释</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出hello world</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello Python&#x27;</span>)  <span class="comment"># 输出(简单的说明可以放到一行代码的后面，一般习惯代码后面添加两个空格再书写注释文字)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>多行注释</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    下面三行都是输出的作用，输出内容分别是：</span></span><br><span class="line"><span class="string">    hello Python</span></span><br><span class="line"><span class="string">    hello world</span></span><br><span class="line"><span class="string">    hello denghy</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello Python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello reader&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello denghy&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    下面三行都是输出的作用，输出内容分别是：</span></span><br><span class="line"><span class="string">    hello Python</span></span><br><span class="line"><span class="string">    hello reader</span></span><br><span class="line"><span class="string">    hello denghy</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello Python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello reader&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello denghy&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：解释器不执行任何的注释内容。</p>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>注释的作用</li>
</ul>
<p>用人类熟悉的语言对代码进行解释说明，方便后期维护。</p>
<ul>
<li>注释的分类<ul>
<li>单行： <code># 注释内容</code>，快捷键ctrl+&#x2F;</li>
<li>多行：<code>&quot;&quot;&quot; 注释内容 &quot;&quot;&quot;</code> 或 <code>&#39;&#39;&#39; 注释内容 &#39;&#39;&#39;</code></li>
</ul>
</li>
<li>解释器不执行注释内容</li>
</ul>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 转换数据类型</title>
    <url>/2022/07/19/python-%E8%BD%AC%E6%8D%A2%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="一-转换数据类型的作用"><a href="#一-转换数据类型的作用" class="headerlink" title="一. 转换数据类型的作用"></a>一. 转换数据类型的作用</h1><p>input()接收用户输入的数据都是字符串类型</p>
<p>转换数据类型–将字符串类型  转换为程序中需要用到的数据类型。</p>
<h1 id="二-转换数据类型的函数"><a href="#二-转换数据类型的函数" class="headerlink" title="二. 转换数据类型的函数"></a>二. 转换数据类型的函数</h1><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">int(x)</td>
<td align="center">将x转换为一个整数</td>
</tr>
<tr>
<td align="center">float(x)</td>
<td align="center">将x转换为一个浮点数</td>
</tr>
<tr>
<td align="center">complex(real [,imag ])</td>
<td align="center">创建一个复数，real为实部，imag为虚部</td>
</tr>
<tr>
<td align="center">str(x)</td>
<td align="center">将对象 x 转换为字符串</td>
</tr>
<tr>
<td align="center">repr(x)</td>
<td align="center">将对象 x 转换为表达式字符串</td>
</tr>
<tr>
<td align="center">eval(str)</td>
<td align="center">用来计算在字符串中的有效Python表达式,并返回一个对象</td>
</tr>
<tr>
<td align="center">tuple(s)</td>
<td align="center">将序列 s 转换为一个元组</td>
</tr>
<tr>
<td align="center">list(s)</td>
<td align="center">将序列 s 转换为一个列表</td>
</tr>
<tr>
<td align="center">chr(x)</td>
<td align="center">将一个整数转换为一个Unicode字符</td>
</tr>
<tr>
<td align="center">ord(x)</td>
<td align="center">将一个字符转换为它的ASCII整数值</td>
</tr>
<tr>
<td align="center">hex(x)</td>
<td align="center">将一个整数转换为一个十六进制字符串</td>
</tr>
<tr>
<td align="center">oct(x)</td>
<td align="center">将一个整数转换为一个八进制字符串</td>
</tr>
<tr>
<td align="center">bin(x)</td>
<td align="center">将一个整数转换为一个二进制字符串</td>
</tr>
</tbody></table>
<span id="more"></span>
<h1 id="三-方法"><a href="#三-方法" class="headerlink" title="三. 方法"></a>三. 方法</h1><p>需求：input接收用户输入，用户输入“1”，将这个数据1转换成整型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 接收用户输入</span></span><br><span class="line">num = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的学号：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;您的学号是<span class="subst">&#123;num&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 检测接收到的用户输入的数据类型 -- str类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 转换数据类型为整型 -- int类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">int</span>(num)))</span><br></pre></td></tr></table></figure>

<h1 id="四-示例"><a href="#四-示例" class="headerlink" title="四. 示例"></a>四. 示例</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. float() -- 转换成浮点型</span></span><br><span class="line">num1 = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(num1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">float</span>(num1)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. str() -- 转换成字符串类型</span></span><br><span class="line">num2 = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">str</span>(num2)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. tuple() -- 将一个序列转换成元组</span></span><br><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(list1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">tuple</span>(list1)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. list() -- 将一个序列转换成列表</span></span><br><span class="line">t1 = (<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(t1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">list</span>(t1)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. eval() -- 将字符串中的数据转换成Python表达式原本类型</span></span><br><span class="line"><span class="comment">#    eval()中的变量不可以是文字类型的字符串，如 &#x27;Hello world&#x27;</span></span><br><span class="line">str1 = <span class="string">&#x27;10&#x27;</span></span><br><span class="line">str2 = <span class="string">&#x27;[1, 2, 3]&#x27;</span></span><br><span class="line">str3 = <span class="string">&#x27;(1000, 2000, 3000)&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">eval</span>(str1)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">eval</span>(str2)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">eval</span>(str3)))</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>转换数据类型常用的函数<ul>
<li>int()</li>
<li>float()</li>
<li>str()</li>
<li>list()</li>
<li>tuple()</li>
<li>eval()</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 输入</title>
    <url>/2022/07/19/python-%E8%BE%93%E5%85%A5/</url>
    <content><![CDATA[<h1 id="一-输入"><a href="#一-输入" class="headerlink" title="一. 输入"></a>一. 输入</h1><p>在Python中，程序接收用户输入的数据的功能即是输入。</p>
<h2 id="1-2-输入的语法"><a href="#1-2-输入的语法" class="headerlink" title="1.2 输入的语法"></a>1.2 输入的语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">input</span>(<span class="string">&quot;提示信息&quot;</span>)</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="1-3-输入的特点"><a href="#1-3-输入的特点" class="headerlink" title="1.3 输入的特点"></a>1.3 输入的特点</h2><ul>
<li>当程序执行到<code>input</code>，等待用户输入，输入完成之后才继续向下执行。</li>
<li>在Python中，<code>input</code>接收用户输入后，一般存储到变量，方便使用。</li>
<li>在Python中，<code>input</code>会把接收到的任意用户输入的数据都当做字符串处理。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">password = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(password)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(password))</span><br></pre></td></tr></table></figure>

<p>此时输入密码：1111</p>
<p>控制台输出结果如下：</p>
<img src="/2022/07/19/python-%E8%BE%93%E5%85%A5/1111.png" class title="This is an test image">

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>输入功能<ul>
<li>input(‘提示文字’)</li>
</ul>
</li>
<li>输入的特点<ul>
<li>一般将input接收的数据存储到变量</li>
<li>input接收的任何数据默认都是字符串数据类型</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 输出</title>
    <url>/2022/07/16/python-%E8%BE%93%E5%87%BA/</url>
    <content><![CDATA[<h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><p>作用：程序输出内容给用户</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello Python&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="一-格式化输出"><a href="#一-格式化输出" class="headerlink" title="一.  格式化输出"></a>一.  格式化输出</h1><p>所谓的格式化输出即按照一定的格式输出内容。</p>
<h3 id="1-1-格式化符号"><a href="#1-1-格式化符号" class="headerlink" title="1.1 格式化符号"></a>1.1 格式化符号</h3><table>
<thead>
<tr>
<th align="center">格式符号</th>
<th align="center">转换</th>
</tr>
</thead>
<tbody><tr>
<td align="center">%s</td>
<td align="center">字符串</td>
</tr>
<tr>
<td align="center">%d</td>
<td align="center">有符号的十进制整数</td>
</tr>
<tr>
<td align="center">%f</td>
<td align="center">浮点数</td>
</tr>
<tr>
<td align="center">%c</td>
<td align="center">字符</td>
</tr>
<tr>
<td align="center">%u</td>
<td align="center">无符号十进制整数</td>
</tr>
<tr>
<td align="center">%o</td>
<td align="center">八进制整数</td>
</tr>
<tr>
<td align="center">%x</td>
<td align="center">十六进制整数（小写ox）</td>
</tr>
<tr>
<td align="center">%X</td>
<td align="center">十六进制整数（大写OX）</td>
</tr>
<tr>
<td align="center">%e</td>
<td align="center">科学计数法（小写’e’）</td>
</tr>
<tr>
<td align="center">%E</td>
<td align="center">科学计数法（大写’E’）</td>
</tr>
<tr>
<td align="center">%g</td>
<td align="center">%f和%e的简写</td>
</tr>
<tr>
<td align="center">%G</td>
<td align="center">%f和%E的简写</td>
</tr>
</tbody></table>
<blockquote>
<p>技巧</p>
</blockquote>
<ul>
<li>%06d，表示输出的整数显示位数，不足以0补全，超出当前位数则原样输出</li>
<li>%.2f，表示小数点后显示的小数位数。<span id="more"></span></li>
</ul>
<h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><ul>
<li>格式化字符串%s</li>
<li><code>f&#39;&#123;表达式&#125;&#39;</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">19</span> </span><br><span class="line">name = <span class="string">&#x27;Adams&#x27;</span></span><br><span class="line">weight = <span class="number">62.50</span></span><br><span class="line">stu_id = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的名字是Adams</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我的名字是%s&#x27;</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的学号是0002</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我的学号是%4d&#x27;</span> % stu_id)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的体重是62.50公斤</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我的体重是%.2f公斤&#x27;</span> % weight)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的名字是Adams，今年19岁了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我的名字是%s，今年%d岁了&#x27;</span> % (name, age))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的名字是Adams，明年20岁了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我的名字是%s，明年%d岁了&#x27;</span> % (name, age + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的名字是Adams，明年20岁了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;我的名字是<span class="subst">&#123;name&#125;</span>, 明年<span class="subst">&#123;age + <span class="number">1</span>&#125;</span>岁了&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>f-格式化字符串是Python3.6中新增的格式化方法，该方法更简单易读。</p>
</blockquote>
<h3 id="1-3-转义字符"><a href="#1-3-转义字符" class="headerlink" title="1.3 转义字符"></a>1.3 转义字符</h3><ul>
<li><code>\n</code>：换行。</li>
<li><code>\t</code>：制表符，一个tab键（4个空格）的距离。</li>
</ul>
<h3 id="1-4-结束符"><a href="#1-4-结束符" class="headerlink" title="1.4 结束符"></a>1.4 结束符</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;输出的内容&#x27;</span>, end=<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;输出的内容&#x27;</span>, end=<span class="string">&quot;...&quot;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在Python中，print()， 默认自带<code>end=&quot;\n&quot;</code>这个换行结束符，所以导致每两个<code>print</code>直接会换行展示</p>
<p>用户可以按需求更改结束符,不仅用转义字符更改，也可以用其他普通字符更改。</p>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>格式化符号<ul>
<li>%s：格式化输出字符串</li>
<li>%d：格式化输出整数</li>
<li>%f：格式化输出浮点数</li>
</ul>
</li>
<li>f-字符串<ul>
<li>f’{表达式}’</li>
</ul>
</li>
<li>转义字符<ul>
<li>\n：换行</li>
<li>\t：制表符</li>
</ul>
</li>
<li>print结束符</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;内容&#x27;</span>, end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇博客</title>
    <url>/2022/07/05/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>创建文章草稿<br>hexo new draft 文章草稿名字</p>
<p>发布草稿<br>hexo publish 草稿名</p>
<p>直接发布文章<br>hexo new 文章名</p>
<p>清理缓存<br>hexo clean</p>
<p>生产静态文件<br>hexo generate   简写 hexo g</p>
<p>本地开启一个服务器测试查看效果<br>hexo serve 简写 hexo s</p>
<p>推送到github，即更新网站文章<br>hexo deploy 简写 hexo d<br>这个推送很有可能不成功，多试几次或者第二天再推送就可以了</p>
]]></content>
  </entry>
  <entry>
    <title>Python 运算符</title>
    <url>/2022/07/22/python-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h1 id="运算符的分类"><a href="#运算符的分类" class="headerlink" title="运算符的分类"></a>运算符的分类</h1><ul>
<li>算数运算符</li>
<li>赋值运算符</li>
<li>复合赋值运算符</li>
<li>比较运算符</li>
<li>逻辑运算符</li>
</ul>
<h2 id="1-算数运算符"><a href="#1-算数运算符" class="headerlink" title="1. 算数运算符"></a>1. 算数运算符</h2><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">加</td>
<td>1 + 1 输出结果为 2</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">减</td>
<td>1 - 1 输出结果为 0</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">乘</td>
<td>2 * 2 输出结果为 4</td>
</tr>
<tr>
<td align="center">&#x2F;</td>
<td align="center">除</td>
<td>10 &#x2F; 2 输出结果为 5</td>
</tr>
<tr>
<td align="center">&#x2F;&#x2F;</td>
<td align="center">整除</td>
<td>9 &#x2F;&#x2F; 4 输出结果为2</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">取余</td>
<td>9 % 4 输出结果为 1</td>
</tr>
<tr>
<td align="center">**</td>
<td align="center">指数</td>
<td>2 ** 4 输出结果为 16，即 2 * 2 * 2 * 2</td>
</tr>
<tr>
<td align="center">()</td>
<td align="center">小括号</td>
<td>小括号用来提高运算优先级，即 (1 + 2) * 3 输出结果为 9</td>
</tr>
</tbody></table>
<span id="more"></span>
<blockquote>
<p>注意：</p>
</blockquote>
<ul>
<li>混合运算优先级顺序：<code>()</code>高于 <code>**</code> 高于 <code>*</code> <code>/</code> <code>//</code> <code>%</code> 高于 <code>+</code> <code>-</code></li>
</ul>
<h2 id="2-赋值运算符"><a href="#2-赋值运算符" class="headerlink" title="2. 赋值运算符"></a>2. 赋值运算符</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;</td>
<td>赋值</td>
<td>将<code>=</code>右侧的结果赋值给等号左侧的变量</td>
</tr>
</tbody></table>
<ul>
<li>单个变量赋值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure>

<ul>
<li>多个变量赋值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num1, float1, str1 = <span class="number">10</span>, <span class="number">0.5</span>, <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(num1)</span><br><span class="line"><span class="built_in">print</span>(float1)</span><br><span class="line"><span class="built_in">print</span>(str1)</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<img src="/2022/07/22/python-%E8%BF%90%E7%AE%97%E7%AC%A6/01.png" class title="This is an test image">



<ul>
<li>多变量赋相同值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = b = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<img src="/2022/07/22/python-%E8%BF%90%E7%AE%97%E7%AC%A6/02.png" class title="This is an test image">



<h2 id="3-复合赋值运算符"><a href="#3-复合赋值运算符" class="headerlink" title="3. 复合赋值运算符"></a>3. 复合赋值运算符</h2><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+&#x3D;</td>
<td align="center">加法赋值运算符</td>
<td align="center">c +&#x3D; a 等价于 c &#x3D; c + a</td>
</tr>
<tr>
<td align="center">-&#x3D;</td>
<td align="center">减法赋值运算符</td>
<td align="center">c -&#x3D; a 等价于 c &#x3D; c- a</td>
</tr>
<tr>
<td align="center">*&#x3D;</td>
<td align="center">乘法赋值运算符</td>
<td align="center">c *&#x3D; a 等价于 c &#x3D; c * a</td>
</tr>
<tr>
<td align="center">&#x2F;&#x3D;</td>
<td align="center">除法赋值运算符</td>
<td align="center">c &#x2F;&#x3D; a 等价于 c &#x3D; c &#x2F; a</td>
</tr>
<tr>
<td align="center">&#x2F;&#x2F;&#x3D;</td>
<td align="center">整除赋值运算符</td>
<td align="center">c &#x2F;&#x2F;&#x3D; a 等价于 c &#x3D; c &#x2F;&#x2F; a</td>
</tr>
<tr>
<td align="center">%&#x3D;</td>
<td align="center">取余赋值运算符</td>
<td align="center">c %&#x3D; a 等价于 c &#x3D; c % a</td>
</tr>
<tr>
<td align="center">**&#x3D;</td>
<td align="center">幂赋值运算符</td>
<td align="center">c ** &#x3D; a 等价于 c &#x3D; c ** a</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line">a += <span class="number">1</span></span><br><span class="line"><span class="comment"># 输出101  a = a + 1,最终a = 100 + 1</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">b *= <span class="number">3</span></span><br><span class="line"><span class="comment"># 输出6  b = b * 3,最终b = 2 * 3</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line">c = <span class="number">10</span></span><br><span class="line">c += <span class="number">1</span> + <span class="number">2</span></span><br><span class="line"><span class="comment"># 输出13, 先算运算符右侧1 + 2 = 3， c += 3 , 推导出c = 10 + 3</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>



<h2 id="4-比较运算符"><a href="#4-比较运算符" class="headerlink" title="4. 比较运算符"></a>4. 比较运算符</h2><p>比较运算符也叫关系运算符， 通常用来判断。</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&#x3D;&#x3D;</td>
<td>判断相等。如果两个操作数的结果相等，则条件结果为真(True)，否则条件结果为假(False)</td>
<td>如a&#x3D;3, b&#x3D;3，则（a &#x3D;&#x3D; b) 为 True</td>
</tr>
<tr>
<td align="center">!&#x3D;</td>
<td>不等于 。如果两个操作数的结果不相等，则条件为真(True)，否则条件结果为假(False)</td>
<td>如a&#x3D;3, b&#x3D;3，则（a &#x3D;&#x3D; b) 为 True如a&#x3D;1,b&#x3D;3，则(a !&#x3D; b) 为 True</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td>运算符左侧操作数结果是否大于右侧操作数结果，如果大于，则条件为真，否则为假</td>
<td>如a&#x3D;7, b&#x3D;3，则(a &gt; b) 为 True</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td>运算符左侧操作数结果是否小于右侧操作数结果，如果小于，则条件为真，否则为假</td>
<td>如a&#x3D;7, b&#x3D;3，则(a &lt; b) 为 False</td>
</tr>
<tr>
<td align="center">&gt;&#x3D;</td>
<td>运算符左侧操作数结果是否大于等于右侧操作数结果，如果大于，则条件为真，否则为假</td>
<td>如a&#x3D;7, b&#x3D;3，则(a &lt; b) 为 False如a&#x3D;3,b&#x3D;3，则(a &gt;&#x3D; b) 为 True</td>
</tr>
<tr>
<td align="center">&lt;&#x3D;</td>
<td>运算符左侧操作数结果是否小于等于右侧操作数结果，如果小于，则条件为真，否则为假</td>
<td>如a&#x3D;3, b&#x3D;3，则(a &lt;&#x3D; b) 为 True</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">7</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(a == b)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(a != b)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(a &lt; b)   <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(a &gt; b)   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(a &lt;= b)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(a &gt;= b)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h2 id="5-逻辑运算符"><a href="#5-逻辑运算符" class="headerlink" title="5. 逻辑运算符"></a>5. 逻辑运算符</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>逻辑表达式</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>and</td>
<td>x and y</td>
<td>布尔”与”：如果 x 为 False，x and y 返回 False，否则它返回 y 的值。</td>
<td>True and False， 返回 False。</td>
</tr>
<tr>
<td>or</td>
<td>x or y</td>
<td>布尔”或”：如果 x 是 True，它返回 True，否则它返回 y 的值。</td>
<td>False or True， 返回 True。</td>
</tr>
<tr>
<td>not</td>
<td>not x</td>
<td>布尔”非”：如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td>
<td>not True 返回 False, not False 返回 True</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>((a &lt; b) <span class="keyword">and</span> (b &lt; c))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>((a &gt; b) <span class="keyword">and</span> (b &lt; c))  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>((a &gt; b) <span class="keyword">or</span> (b &lt; c))   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> (a &gt; b))          <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h3 id="5-1-拓展"><a href="#5-1-拓展" class="headerlink" title="5.1 拓展"></a>5.1 拓展</h3><p>数字之间的逻辑运算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line">c = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># and运算符，只要有一个值为0，则结果为0，否则结果为最后一个非0数字</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">and</span> b)  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(b <span class="keyword">and</span> a)  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">and</span> c)  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(c <span class="keyword">and</span> a)  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(b <span class="keyword">and</span> c)  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(c <span class="keyword">and</span> b)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or运算符，只有所有值为0结果才为0，否则结果为第一个非0数字</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">or</span> b)  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">or</span> c)  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(b <span class="keyword">or</span> c)  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>算数运算的优先级<ul>
<li>混合运算优先级顺序：<code>()</code>高于 <code>**</code> 高于 <code>*</code> <code>/</code> <code>//</code> <code>%</code> 高于 <code>+</code> <code>-</code></li>
</ul>
</li>
<li>赋值运算符<ul>
<li>&#x3D;</li>
</ul>
</li>
<li>复合赋值运算符<ul>
<li>+&#x3D;</li>
<li>-&#x3D;</li>
<li>优先级<ol>
<li>先算复合赋值运算符右侧的表达式</li>
<li>再算复合赋值运算的算数运算</li>
<li>最后算赋值运算</li>
</ol>
</li>
</ul>
</li>
<li>比较运算符<ul>
<li>判断相等： &#x3D;&#x3D; </li>
<li>大于等于： &gt;&#x3D;</li>
<li>小于等于：&lt;&#x3D;</li>
<li>不等于： !&#x3D;</li>
</ul>
</li>
<li>逻辑运算符<ul>
<li>与： and</li>
<li>或：or</li>
<li>非：not</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
